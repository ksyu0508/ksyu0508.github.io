<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="ko"><generator uri="https://jekyllrb.com/" version="3.9.5">Jekyll</generator><link href="https://ksyu0508.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://ksyu0508.github.io/" rel="alternate" type="text/html" hreflang="ko" /><updated>2024-05-02T14:10:10+00:00</updated><id>https://ksyu0508.github.io/feed.xml</id><title type="html">ksyu0508’s blog</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><author><name>ksyu0508</name></author><entry><title type="html">PromQL 사용법</title><link href="https://ksyu0508.github.io/prometheus/promql/" rel="alternate" type="text/html" title="PromQL 사용법" /><published>2024-04-28T00:00:00+00:00</published><updated>2024-04-28T00:00:00+00:00</updated><id>https://ksyu0508.github.io/prometheus/promql</id><content type="html" xml:base="https://ksyu0508.github.io/prometheus/promql/"><![CDATA[<p><code class="language-plaintext highlighter-rouge">PromQL</code>은 Prometheus Query Language의 약자로 말그대로 prometheus를 사용하고자 할 때 필요한 쿼리 언어이다. QL이 붙어있기 때문에 SQL과 유사할 줄 알았지만, 꼭 그렇지는 않다. SQL을 알고 있더라도 사용하는데에는 큰 도움이 되지는 않았다고 느끼지만, 그래도 배우기 어렵지 않으며 사용하기 편하게 만들어졌다. <code class="language-plaintext highlighter-rouge">PromQL</code>을 사용하여, Prometheus의 데이터를 조작, 필터링, 집계 등의 작업을 수행할 수 있다.</p>

<h2 id="data-type">Data type</h2>

<p>SQL의 쿼리 결과가 테이블인 것처럼, <code class="language-plaintext highlighter-rouge">PromQL</code>의 쿼리 결과는 기본적으로 time series, 즉 시계열 데이터로 생각하면 된다. 쿼리 결과는 총 4가지의 데이터 타입이 존재한다.</p>

<ul>
  <li>Instant Vector: 시간별로 하나의 값을 갖는 시계열의 집합</li>
  <li>Range Vector: 시간별로 정해진 시간 구간의 데이터 값을 갖는 시계열의 집합</li>
  <li>Scalar: 단일 float 값</li>
  <li>String: 단일 string 값, 현재 사용 X</li>
</ul>

<p>Range Vector를 설명 그래도 이해하기에는 약간 애매함이 있었는데, 다른 쿼리나 함수를 활용하기 위한 서브쿼리의 결과물로 이해하는 것이 빠를 것이다. 왜냐하면 <code class="language-plaintext highlighter-rouge">PromQL</code>에서는 그래프를 그리고자 할 때에는 반드시 Instant Vector를 얻어야 한다. <code class="language-plaintext highlighter-rouge">PromQL</code>도 SQL과 마찬가지로 서브쿼리를 지원하기 때문에, Range Vector 결과 값에 rate 등의 함수를 활용하여서 원하는 Instante Vector를 얻은 후에 그래프를 그릴 수 있게 된다.</p>

<h2 id="query-example">Query Example</h2>

<p>prometheus 환경을 아직 구축하지 못하였거나, 데이터가 마땅치 않은 경우에는 아래 데모사이트에서 <code class="language-plaintext highlighter-rouge">PromQL</code>을 사용해볼 수 있다.</p>

<div class="jekyll-linkpreview-wrapper">
  <div class="jekyll-linkpreview-wrapper-inner">
    <div class="jekyll-linkpreview-content">
      <div class="jekyll-linkpreview-image">
        <a href="https://demo.promlens.com/" target="_blank">
          <img src="" />
        </a>
      </div>
    </div>
    <div class="jekyll-linkpreview-footer">
      <div class="jekyll-linkpreview-body">
        <h1 class="jekyll-linkpreview-title">
          <a href="https://demo.promlens.com/" target="_blank">PromLens - The query builder, analyzer, and explainer for PromQL</a>
        </h1>
        <div class="jekyll-linkpreview-description">PromLens - The query builder, analyzer, and explainer for PromQL</div>
      </div>
      <a href="demo.promlens.com" target="_blank">demo.promlens.com</a>
    </div>
  </div>
</div>

<p>기본적으로 아무 처리 없이 쿼리할 경우에는 타임스탬프의 하나의 값만을 갖는 Instanct Vector를 반환하게 된다. 이는 그래프로 바로 활용할 수 있는 데이터이다. <code class="language-plaintext highlighter-rouge">prometheus_http_requests_total</code> 만 사용한다면 모든 시계열 데이터를 쿼리할 수 있으며 (SQL에서 <code class="language-plaintext highlighter-rouge">SELECT * FROM table</code> 과 같은 느낌) 뒤에 handler, job, code, instance 등을 명시하여 원하는 데이터 만을 골라낼 수 있다.</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">prometheus_http_requests_total</span><span class="p">{</span><span class="k">handler</span><span class="o">=</span><span class="nv">"/api/v1/query_range"</span><span class="p">,</span> <span class="n">job</span><span class="o">=</span><span class="nv">"prometheus"</span><span class="p">}</span>
</code></pre></div></div>

<p><img src="https://drive.google.com/thumbnail?id=1L3rF-NMuyT_1W4R2neBCk7THiGTRwuCV&amp;sz=w1000" alt="" /></p>

<h2 id="range-vector">Range Vector</h2>

<p>그렇지만 뒤에 [5m]과 같이 range를 명시해준다면, Range Vector을 얻을 수 있다. 이 경우 5분 구간에 위치하는 모든 레코드를 가져오게 되며, [5m:1m]와 같이 표시해준다면, 5분 구간 동안 1분 간격으로 레코드를 가져오게 된다. 시간 단위는 밀리세컨드(ms), 부터 년(y) 단위까지 사용할 수 있다. 윤초(leap second)와 윤일(leap day)는 무시되며 1년은 무조건 365일로 계산된다고 나와 있다.</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">prometheus_http_requests_total</span><span class="p">{</span><span class="k">handler</span><span class="o">=</span><span class="nv">"/api/v1/query_range"</span><span class="p">,</span> <span class="n">job</span><span class="o">=</span><span class="nv">"prometheus"</span><span class="p">}[</span><span class="mi">5</span><span class="n">m</span><span class="p">]</span>
</code></pre></div></div>

<p><img src="https://drive.google.com/thumbnail?id=1H5vpdb4FgEhVWPF7_1QQFxsq9H6DUNzr&amp;sz=w1000" alt="" /></p>

<p>바로 그래프를 그리려 한다면, 오류가 나오는 모습을 확인할 수 있다.</p>

<p><code class="language-plaintext highlighter-rouge">PromQL</code>에서 사용할 수 있는 다양한 함수들은 공식 documention에서 확인할 수 있다.</p>

<div class="jekyll-linkpreview-wrapper">
  <div class="jekyll-linkpreview-wrapper-inner">
    <div class="jekyll-linkpreview-content">
      <div class="jekyll-linkpreview-image">
        <a href="https://prometheus.io/docs/prometheus/latest/querying/basics/" target="_blank">
          <img src="" />
        </a>
      </div>
    </div>
    <div class="jekyll-linkpreview-footer">
      <div class="jekyll-linkpreview-body">
        <h1 class="jekyll-linkpreview-title">
          <a href="https://prometheus.io/docs/prometheus/latest/querying/basics/" target="_blank">Querying basics | Prometheus</a>
        </h1>
        <div class="jekyll-linkpreview-description">An open-source monitoring system with a dimensional data model, flexible query language, efficient time series database and modern alerting approach.</div>
      </div>
      <a href="prometheus.io" target="_blank">prometheus.io</a>
    </div>
  </div>
</div>]]></content><author><name>ksyu0508</name></author><category term="Prometheus" /><category term="Prometheus" /><category term="PromQL" /><summary type="html"><![CDATA[PromQL은 Prometheus Query Language의 약자로 말그대로 prometheus를 사용하고자 할 때 필요한 쿼리 언어이다. QL이 붙어있기 때문에 SQL과 유사할 줄 알았지만, 꼭 그렇지는 않다. SQL을 알고 있더라도 사용하는데에는 큰 도움이 되지는 않았다고 느끼지만, 그래도 배우기 어렵지 않으며 사용하기 편하게 만들어졌다. PromQL을 사용하여, Prometheus의 데이터를 조작, 필터링, 집계 등의 작업을 수행할 수 있다.]]></summary></entry><entry><title type="html">code-server 설치 및 HTTPS 연결 설정</title><link href="https://ksyu0508.github.io/linux/code-server/" rel="alternate" type="text/html" title="code-server 설치 및 HTTPS 연결 설정" /><published>2024-04-15T00:00:00+00:00</published><updated>2024-04-15T00:00:00+00:00</updated><id>https://ksyu0508.github.io/linux/code-server</id><content type="html" xml:base="https://ksyu0508.github.io/linux/code-server/"><![CDATA[<h2 id="서론">서론</h2>

<p>현재 인턴하고 있는 회사가 보안이 중요하여 사내망에서 작성된 문서나 코드를 밖으로 반출하기가 까다롭다. 개인 공부 내용 정리 및 테스트 개발 환경이 필요하지만 허용되는 개인 전자기기는 아이패드, 갤럭시탭 등의 태블릿까지만 허용되기 때문에, 태블릿에서 사용할 수 있는 간단한 개발환경을 만들고자 한다. 주피터 랩등의 환경도 있지만, 파이썬 뿐만 아니라 다른 파일들도 다룰 예정이기 때문에 익숙한 VS code와 같은 IDE를 원했는데, 놀랍게도 VS code는 마이크로소프트에서 만들었지만 오픈소스이기 때문에, code-server와 같은 웹으로 호스트할 수 있는 IDE가 만들어져 있다. 따라서 개인 NAS에 code-server를 설치하고 안드로이드 태블릿에서 사용할 계획을 세웠다.</p>

<div class="jekyll-linkpreview-wrapper">
  <div class="jekyll-linkpreview-wrapper-inner">
    <div class="jekyll-linkpreview-content">
      <div class="jekyll-linkpreview-image">
        <a href="https://github.com/microsoft/vscode" target="_blank">
          <img src="https://opengraph.githubassets.com/e92e6e5a885e62964b990e70f9ef065638a9506a3b6b80befd904990d96d05c0/microsoft/vscode" />
        </a>
      </div>
    </div>
    <div class="jekyll-linkpreview-footer">
      <div class="jekyll-linkpreview-body">
        <h1 class="jekyll-linkpreview-title">
          <a href="https://github.com/microsoft/vscode" target="_blank">GitHub - microsoft/vscode: Visual Studio Code</a>
        </h1>
        <div class="jekyll-linkpreview-description">Visual Studio Code. Contribute to microsoft/vscode development by creating an account on GitHub.</div>
      </div>
      <a href="github.com" target="_blank">github.com</a>
    </div>
  </div>
</div>

<h2 id="code-server-설치">Code-Server 설치</h2>

<div class="jekyll-linkpreview-wrapper">
  <div class="jekyll-linkpreview-wrapper-inner">
    <div class="jekyll-linkpreview-content">
      <div class="jekyll-linkpreview-image">
        <a href="https://hub.docker.com/r/linuxserver/code-server" target="_blank">
          <img src="" />
        </a>
      </div>
    </div>
    <div class="jekyll-linkpreview-footer">
      <div class="jekyll-linkpreview-body">
        <h1 class="jekyll-linkpreview-title">
          <a href="https://hub.docker.com/r/linuxserver/code-server" target="_blank">Docker</a>
        </h1>
        <div class="jekyll-linkpreview-description"></div>
      </div>
      <a href="hub.docker.com" target="_blank">hub.docker.com</a>
    </div>
  </div>
</div>

<p>docker compose를 활용하여 코드 서버를 구성하였다. 서버의 경우 외부망 접속시 VPN을 활용하고 있기 때문에, 외부에 코드서버가 노출될 일이 없어서 편의를 위해서 별도로 비밀번호를 설정하지는 않았다. code-server의 경우 vs code처럼 터미널을 열 수 있기 때문에 외부에 포트 개방하는 경우에는 비밀번호 설정 이외에도 추가 보안 설정을 필요로 할 것이다.</p>

<pre><code class="language-YAML">services:
  code-server:
    image: lscr.io/linuxserver/code-server:latest
    container_name: code-server
    environment:
      - PUID=1000
      - PGID=100
      - TZ=Asia/Seoul
    #   - PASSWORD=password #optional
    #   - HASHED_PASSWORD= #optional
    #   - SUDO_PASSWORD=password #optional
    #   - SUDO_PASSWORD_HASH= #optional
    #   - PROXY_DOMAIN=code-server.my.domain #optional
      - DEFAULT_WORKSPACE=/workspace
    volumes:
      - /path/to/appdata/config:/config
      - {마운트 할 디렉토리}:/workspace
    ports:
      - 8443:8443
    restart: unless-stopped
</code></pre>

<p>컨테이너로 구성된 코드서버로 접속 시, 파일 탐색은 컨테이너 내부만 가능하기 때문에 미리 사용하고자 할 디렉토리를 연결해주어야 한다. 도커 컴포즈 파일에서 DEFAULT_WORKSPACE를 설정할 수 있는데 이는 컨테이너 파일 시스템 기준이며, 여기에 원래 서버에서 사용하고자 할 디렉토리를 마운트한다면 편하게 code-server를 활용 수 있을 것이다.</p>

<p><img src="https://drive.google.com/thumbnail?id=198zNVvvwQ9so5oD5FKotP3I9GIFPSB2j&amp;sz=w1000" alt="" /></p>

<p>안드로이드 크롬 메뉴의 홈화면 내보내기 기능을 이용해서, 컴퓨터의 크로니움 기반 브라우저에서 웹을 어플리케이션으로 설치할 수 있는 것처럼 code-server를 별도의 어플처럼 사용할 수 있다. 웹 브라우저에서 접속할 경우에 단축키가 웹 브라우저와 code-server의 것이 섞이기 때문에 사용하기가 불편하다.</p>

<p><img src="https://drive.google.com/thumbnail?id=1CG1QC2WU1SLQgNEXeMlq97juuOlrFATs&amp;sz=w1000" alt="" />
<em><center>갤럭시탭 S8에서 실행 중인 code-server 모습</center></em></p>

<h2 id="self-signed-certificate를-활용한-https-구성">Self signed certificate를 활용한 HTTPS 구성</h2>

<p><img src="https://drive.google.com/thumbnail?id=191FCd0K_x--FM_hqSsypDaeU-uQx6Amr&amp;sz=w1000" alt="" /></p>

<p>code-server의 경우 기본적으로는 HTTP를 이용해서 연결되는데, vpn을 활용하고 있어서 내부망으로만 접속할 예정이기에 따로 HTTPS를 설정하지 않으려 하였지만, HTTPS 연결이 아닌 HTTP로만 연결 시 제대로 작동하지 않을 수 있다는 경고가 친절하게 나온다. 그냥 사용하려 했지만, 클립보드를 비롯하여 마크다운 프리뷰 기능이 작동하지 않기 때문에 결국 HTTPS를 구성하기로 하였다.</p>

<p>외부망에 노출되어 있는 상태는 아니였기에 따로 nginx proxy manager 등의 프록시를 활용한 HTTPS 구성은 진행하지 않고, 간단하게 self signed certificate를 이용하여 HTTPS를 구성하려고 하였다.</p>

<div class="jekyll-linkpreview-wrapper">
  <div class="jekyll-linkpreview-wrapper-inner">
    <div class="jekyll-linkpreview-content">
      <div class="jekyll-linkpreview-image">
        <a href="https://coder.com/docs/code-server/latest/guide" target="_blank">
          <img src="https://coder.com/og-image.png" />
        </a>
      </div>
    </div>
    <div class="jekyll-linkpreview-footer">
      <div class="jekyll-linkpreview-body">
        <h1 class="jekyll-linkpreview-title">
          <a href="https://coder.com/docs/code-server/latest/guide" target="_blank">Usage - code-server Docs</a>
        </h1>
        <div class="jekyll-linkpreview-description">How to set up and use code-server.</div>
      </div>
      <a href="coder.com" target="_blank">coder.com</a>
    </div>
  </div>
</div>

<p>code-server documetation을 확인해보면 self-signed certificate를 활용하여 HTTPS를 구성할 수 있음을 안내하고 있다. 실행시 <code class="language-plaintext highlighter-rouge">--cert</code> 옵션을 추가하여 자동으로 인증서 발급 후 HTTPS 연결을 진행하거나, <code class="language-plaintext highlighter-rouge">--cert</code>와 <code class="language-plaintext highlighter-rouge">--cert-key</code>옵션에 따로 <code class="language-plaintext highlighter-rouge">.crt</code>와 <code class="language-plaintext highlighter-rouge">.key</code>파일 경로를 넣어서 별도로 발급한 인증서를 사용하여 HTTPS 연결을 진행할 수도 있다.</p>

<p>docker compose를 활용하여 code-server 이미지를 구동하고 있기 때문에, 인증서를 yaml 파일에 volumes와 command를 활용하여 추가하려 하였지만 제대로 작동하지 않았고, 결국 일단 컨테이너 실행 후 컨테이너 내부의 config 파일을 직접 변경하기로 하였다. <code class="language-plaintext highlighter-rouge">/config/.config/code-server/config.yaml</code>로 기본적으로 위치하고 있다.</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">bind-addr</span><span class="pi">:</span> <span class="s">127.0.0.1:8080</span>
<span class="na">auth</span><span class="pi">:</span> <span class="s">password</span>
<span class="na">password</span><span class="pi">:</span> <span class="c1"># PASSWORD HASH</span>
<span class="na">cert</span><span class="pi">:</span> <span class="no">true</span>
</code></pre></div></div>

<p>여기서 <code class="language-plaintext highlighter-rouge">cert</code> 옵션 기본이 false로 되어 있는데, <code class="language-plaintext highlighter-rouge">true</code>로 변경 후 컨테이너를 재실행시키면 된다. 그러면 HTTPS로 접속이 되는 모습을 확인할 수 있다.</p>

<p><img src="https://drive.google.com/thumbnail?id=199OM1mlbiEb4fQkpkiZZY6mzAkPwoNXk&amp;sz=w500" alt="" />
<em><center>그렇지만 여전히 제일 중요한 markdwon preview 기능이 작동하지 않는다...</center></em></p>

<h2 id="파이어폭스로-문제-임시-해결">파이어폭스로 문제 임시 해결..</h2>

<p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/7/76/Mozilla_Firefox_logo_2013.svg/227px-Mozilla_Firefox_logo_2013.svg.png" alt="" />
<em><center>어떻게 우리는 코드 서버를 구동할 수 있었을까? 정답은 파이어폭스에 있었어</center></em></p>

<p>사실 code-server에서 HTTPS 구성을 해야지 제대로 사용할 수 있다는 내용은 쉽게 찾아 볼 수 있다. 대부분의 사람들은 nginx 등을 활용하여 프록시를 구성하고 SSL 인증서를 발급 후 HTTPS 연결을 만들어 준다. 하지만, 외부망에 연결하고 도메인에 연결하기에는 공유기, VM 등의 여러 조건이 맞물려서 구성하기 귀찮고, 또 혼자서 사용할 목적이다 보니 굳이 외부망에 노출하기 꺼려지기도 해서 self signed certificate로 구성하려 하였다. self signed certificate의 경우 크롬이나 엣지 등의 브라우저에서 연결 전에 안전하지 않은 연결이라고 친절하게 경고를 해주지만, 이를 무시하고 접속할 수 있다.</p>

<div class="jekyll-linkpreview-wrapper">
  <div class="jekyll-linkpreview-wrapper-inner">
    <div class="jekyll-linkpreview-content">
      <div class="jekyll-linkpreview-image">
        <a href="https://stackoverflow.com/questions/38728176/can-you-use-a-service-worker-with-a-self-signed-certificate" target="_blank">
          <img src="https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded" />
        </a>
      </div>
    </div>
    <div class="jekyll-linkpreview-footer">
      <div class="jekyll-linkpreview-body">
        <h1 class="jekyll-linkpreview-title">
          <a href="https://stackoverflow.com/questions/38728176/can-you-use-a-service-worker-with-a-self-signed-certificate" target="_blank">Can you use a service worker with a self-signed certificate?</a>
        </h1>
        <div class="jekyll-linkpreview-description">I have developer server that are used for testing. They have SSL self-signed certificates, which allow us to test the web application over HTTPS, but with prominent warnings that the certificates a...</div>
      </div>
      <a href="stackoverflow.com" target="_blank">stackoverflow.com</a>
    </div>
  </div>
</div>

<p>위 스레드를 확인해본 결과, 강제로 연결을 진행하더라도 보안상의 이유로 완전히 모든 기능을 사용할 수 있게 해주는 것은 아닌 것을 확인할 수 있었고, Firefox 브라우저를 활용하여 접속하면 문제 없이 기능이 작동하는 모습을 보여준다. 아마 관련 보안 조치 적용이 크롬이나 엣지보다는 약한 이유 등으로 보여지지만 확실치는 않다.
안드로이드 태블릿이라는 조건 하에서 둘다 적용하기에는 애매하였는데, PC 환경이나 ipad 등의 경우 크롬에서 이 보안 관련 옵션을 끄고 브라우저로 접속하면 문제가 없다는 내용을 확인할 수 있다. 또, 디바이스나 브라우저에게 code-server에서 만든 인증서를 신뢰하도록 설정해주는 방법도 있다.</p>

<p><img src="https://drive.google.com/thumbnail?id=19E3GlCollq_liEAhKV9W-VeyN4KqVJmm&amp;sz=w1000" alt="" /></p>

<p>파이어폭스 브라우저 자체의 문제로, 한글 인코딩이 깨지거나, 폰트가 궁서체로 나오고, 홈화면에 추가 기능을 사용해도 단독 어플리케이션 처럼은 활용할 수 없다는 아쉬움이 존재한다. 그렇지만, 간단한 코딩이나 메모 용도로 사용하기에는 문제 없어보인다.</p>]]></content><author><name>ksyu0508</name></author><category term="linux" /><category term="linux" /><category term="NAS" /><category term="code-server" /><category term="OMV" /><category term="self signed certificate" /><category term="HTTPS" /><summary type="html"><![CDATA[서론]]></summary></entry><entry><title type="html">WSL 네트워크 드라이브 마운트 방법</title><link href="https://ksyu0508.github.io/linux/WSL-NAS/" rel="alternate" type="text/html" title="WSL 네트워크 드라이브 마운트 방법" /><published>2024-04-14T00:00:00+00:00</published><updated>2024-04-14T00:00:00+00:00</updated><id>https://ksyu0508.github.io/linux/WSL-NAS</id><content type="html" xml:base="https://ksyu0508.github.io/linux/WSL-NAS/"><![CDATA[<p>WSL을 통해서 윈도우 사용자도 리눅스 명령어와 응용프로그램을 활용할 수 있다. 설정에 따라 다르지만, 일반적으로 <code class="language-plaintext highlighter-rouge">C:\Users\사용자이름\AppData\Local\Packages\</code>아래 본인이 설치한 리눅스 패키지 폴더 속 <code class="language-plaintext highlighter-rouge">LocalState/ext4.vhdx</code>안에 위치하고 있다. 그래서 실제로는 C드라이브를 공유하면서 사용하고 있는 것이다. 당연히 WSL에서도 C드라이브를 비롯한 다른 드라이브로 접근이 가능하다. 다른 리눅스 환경처림 /mnt 안에서 c, d 드라이브 들을 찾아볼 수 있다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/mnt<span class="nv">$ </span><span class="nb">ls
</span>c  d  wsl  wslg
</code></pre></div></div>

<p>물리 드라이브가 아닌 네트워크 위치의 경우에는 자동적으로 잡아주지 못할 수 있다. 네트워크 드라이브가 E드라이브에 위치하고 있지만 잡아주지 못하는 모습이다. 그렇지만 간단하게 직접 마운트 할 수 있다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/mnt<span class="nv">$ </span><span class="nb">sudo mkdir</span> <span class="o">{</span>마운트할 디렉토리<span class="o">}</span>
</code></pre></div></div>
<p>mkdir을 통해서 드라이브를 마운트할 디렉토리를 만들어준다. 꼭 <code class="language-plaintext highlighter-rouge">/mnt</code> 안에 위치하지 않아도 상관은 없다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/mnt<span class="nv">$ </span><span class="nb">sudo </span>mount <span class="nt">-t</span> drvfs <span class="o">{</span>마운트할 드라이브<span class="o">}</span> <span class="o">{</span>마운트할 디렉토리<span class="o">}</span>
</code></pre></div></div>
<p>일반적인 파일시스템이 아닌 <code class="language-plaintext highlighter-rouge">drvfs</code>가 사용되며, 이는 WSL에서 linux와 윈도우 상호 운용성을 위해 사용되는 가상파일 시스템이다.</p>

<p>재부팅 후에도 계속해서 마운트를 원한다면 별도로 설정을 해야한다. 리눅스 파일 시스템 정보는 <code class="language-plaintext highlighter-rouge">/etc/fstab</code>에 저장되기 때문에, 마운트 내용을 추가하여야 하는데, WSL은 기본적으로 fstab 파일이 만들어져있지 않아서 직접 추가하면 된다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>~<span class="nv">$ </span><span class="nb">sudo touch</span> /etc/fstab
~<span class="nv">$ </span><span class="nb">sudo echo</span> <span class="o">{</span>공유폴더 주소<span class="o">}</span>    /mnt/<span class="o">{</span>마운트한 디렉토리<span class="o">}</span>    drvfs defaults,uid<span class="o">=</span>1000,gid<span class="o">=</span>1000    0    0 <span class="o">&gt;&gt;</span> /etc/fstab
</code></pre></div></div>]]></content><author><name>ksyu0508</name></author><category term="linux" /><category term="linux" /><category term="NAS" /><category term="windows" /><category term="WSL" /><summary type="html"><![CDATA[WSL을 통해서 윈도우 사용자도 리눅스 명령어와 응용프로그램을 활용할 수 있다. 설정에 따라 다르지만, 일반적으로 C:\Users\사용자이름\AppData\Local\Packages\아래 본인이 설치한 리눅스 패키지 폴더 속 LocalState/ext4.vhdx안에 위치하고 있다. 그래서 실제로는 C드라이브를 공유하면서 사용하고 있는 것이다. 당연히 WSL에서도 C드라이브를 비롯한 다른 드라이브로 접근이 가능하다. 다른 리눅스 환경처림 /mnt 안에서 c, d 드라이브 들을 찾아볼 수 있다.]]></summary></entry><entry><title type="html">linux 서버 WOL 설정</title><link href="https://ksyu0508.github.io/linux/NAS-3/" rel="alternate" type="text/html" title="linux 서버 WOL 설정" /><published>2024-01-04T00:00:00+00:00</published><updated>2024-01-04T00:00:00+00:00</updated><id>https://ksyu0508.github.io/linux/NAS-3</id><content type="html" xml:base="https://ksyu0508.github.io/linux/NAS-3/"><![CDATA[<h2 id="서론">서론</h2>

<p>구성한 NAS 서버가 아이들시 30W, 사용 시 60W 정도의 전력을 소모하는데 대부분 아이들 상태일 것이지만 30W가 계속 켜져있으면 무시할 만한 수준의 전력 소모도 아니고, 또 계속 집에 컴퓨터가 켜져 있는 것도 신경쓰이기 때문에 필요할 때마다 외부에서도 전원을 킬 수 있도록 NAS 서버에 <code class="language-plaintext highlighter-rouge">WOL</code>을 구성하려 한다. <code class="language-plaintext highlighter-rouge">WOL</code>은 <code class="language-plaintext highlighter-rouge">"Wake-on-LAN"</code>의 약자로, 컴퓨터를 네트워크 장치를 활용하여 원격으로 켜는 기술이다. <code class="language-plaintext highlighter-rouge">WOL</code>을 위해서는</p>

<ol>
  <li>네트워크 어댑터 <code class="language-plaintext highlighter-rouge">WOL</code> 기능 지원 여부</li>
  <li>BIOS 설정(<code class="language-plaintext highlighter-rouge">ErP</code>/<code class="language-plaintext highlighter-rouge">Power On By PCI-E/Wake on Lan</code>)</li>
  <li>공유기 설정</li>
  <li>OS(linux/windows) WOL 설정</li>
</ol>

<p>을 확인하여 주면 된다.</p>

<h3 id="1-네트워크-어댑터-wol-기능-지원-여부">1. 네트워크 어댑터 <code class="language-plaintext highlighter-rouge">WOL</code> 기능 지원 여부</h3>

<p>최근 나오는 랜카드들은 거의 기본적으로 <code class="language-plaintext highlighter-rouge">WOL</code>기능을 활용하고 있기에 크게 신경쓰지 않아도 된다.</p>

<h3 id="2-bios-설정">2. BIOS 설정</h3>

<p>메인보드 제조사마다 다르지만 Asus기준으로 <code class="language-plaintext highlighter-rouge">ErP</code>와 <code class="language-plaintext highlighter-rouge">Power On By PCI-E</code> 옵션 두가지를 체크해주면 된다. <code class="language-plaintext highlighter-rouge">ErP</code>의 옵션이 활성화 되있을 경우, 대기 전력 소모를 줄이기 위해서 컴퓨터가 일부 하드웨어들을 비활성화시킬 수 있는데, 네트워크 어댑터는 매직패킷 수신을 위해서 항상 대기하고 있어야 하기 때문에, <code class="language-plaintext highlighter-rouge">ErP</code> 옵션이 비활성화 되어야, 항상 컴퓨터가 매직패킷 수신을 위해서 대기할 수 있는 상태를 유지할 수 있다. 다만 <code class="language-plaintext highlighter-rouge">ErP</code>옵션이 활성화 되었을 경우 다른 부품들, 특히 LED가 안 꺼질 수도 있는 상황이 발생할 수 있다.(상당히 거슬림) <code class="language-plaintext highlighter-rouge">Power On By PCI-E/Wake on Lan</code>옵션의 경우, WOL을 사용하기 위해서 활성화하여야 한다. Asus 메인보드 설정 과정의 경우 아래 링크 참고</p>

<div class="jekyll-linkpreview-wrapper">
  <div class="jekyll-linkpreview-wrapper-inner">
    <div class="jekyll-linkpreview-content">
      <div class="jekyll-linkpreview-image">
        <a href="https://www.asus.com/kr/support/FAQ/1048459/" target="_blank">
          <img src="" />
        </a>
      </div>
    </div>
    <div class="jekyll-linkpreview-footer">
      <div class="jekyll-linkpreview-body">
        <h1 class="jekyll-linkpreview-title">
          <a href="https://www.asus.com/kr/support/FAQ/1048459/" target="_blank">[Commercial DT] WOL(Wake on LAN) 기능을 활성화하는 방법 | 공식지원 | ASUS 한국</a>
        </h1>
        <div class="jekyll-linkpreview-description">제품 선택
              
                
                    
                      
                        
                      
                    
                    
                      
                    
                
              
            </div>
      </div>
      <a href="www.asus.com" target="_blank">www.asus.com</a>
    </div>
  </div>
</div>

<h3 id="3-공유기-설정">3. 공유기 설정</h3>

<p><img src="https://onedrive.live.com/embed?resid=C5BC7ED83BDA0D3B%2111834&amp;authkey=%21AGQRkwxENQWgWQA&amp;width=923&amp;height=751" alt="" /></p>

<p>공유기도 마찬가지로 제조사마다 설정이 다르다. 설정해주어야 할 것은 크게 두가지인데 첫번째로 WOL을 사용할 PC의 IP를 고정으로 할당하여 주어야 하며, 외부망에서 WOL을 활용하고자 할 경우 포트포워딩을 해주어야 한다.</p>

<p><code class="language-plaintext highlighter-rouge">DHCP(Dynamic Host Configuration Protocol)</code>서버(공유기)는 네트워크에 연결된 장치들에게 자동으로 IP주소를 할당(임대)하여 주는데 따로 설정하지 않으면, 임의로 IP주소를 할당하고 연결이 끊어질 경우 주소를 회수하여 간다. 공유기 설정에서 MAC주소를 통해서 내부 IP주소를 고정적으로 할당할 수 있으며, 필자가 사용하는 LG U+ 공유기에서는 DHCP 고정할당이라는 메뉴가 존재하여 MAC 주소만 기입하여 주면 원하는 IP를 고정적으로 할당할 수 있다.</p>

<p>내부망에서만 활용할 경우에는 크게 상관이 없지만, WOL을 구성하려는 대부분의 사람들은 집 밖의 환경에서 컴퓨터를 켜기 위함이 대부분일 것이다. WOL은 기본적으로 9번 포트에 UDP를 활용하여 매직 패킷을 전송한다. 따라서 포트포워딩 시에는 외부 포트를 7777등으로 임의로 설정 후, WOL을 사용하고자 하는 컴퓨터의 9번포트를 UDP로 연결해주면 될 것이다.</p>

<p>가정에서 사용하는 공유기 IP의 경우 대부분 유동 IP 방식이기 때문에, 외부에서 편하게 사용하기 위해서는 <code class="language-plaintext highlighter-rouge">DDNS</code>가 필요할 수도 있다. <code class="language-plaintext highlighter-rouge">DDNS</code>는 <code class="language-plaintext highlighter-rouge">"Dynamic Domain Name System"</code>의 약자로, 유동 IP 도메인 이름과 동적으로 연결하는 시스템으로, 공유기에서 지원하는 <code class="language-plaintext highlighter-rouge">DDNS</code>를 활용하는 것도 방법이다. LG U+ 공유기에서는 세가지 <code class="language-plaintext highlighter-rouge">DDNS</code> 사이트를 지원하며, 그 중에 무료인 <code class="language-plaintext highlighter-rouge">freedns</code>를 활용하여 <code class="language-plaintext highlighter-rouge">DDNS</code>를 구성하였다.</p>

<div class="jekyll-linkpreview-wrapper">
  <div class="jekyll-linkpreview-wrapper-inner">
    <div class="jekyll-linkpreview-content">
      <div class="jekyll-linkpreview-image">
        <a href="https://freedns.afraid.org/" target="_blank">
          <img src="" />
        </a>
      </div>
    </div>
    <div class="jekyll-linkpreview-footer">
      <div class="jekyll-linkpreview-body">
        <h1 class="jekyll-linkpreview-title">
          <a href="https://freedns.afraid.org/" target="_blank">FreeDNS - Free DNS - Dynamic DNS - Static DNS subdomain and domain hosting</a>
        </h1>
        <div class="jekyll-linkpreview-description">Free DNS hosting, lets you fully manage your own domain.  Dynamic DNS and Static DNS services available.  You may also create hosts off other domains that we host upon the domain owners consent, we have several domains to choose from!</div>
      </div>
      <a href="freedns.afraid.org" target="_blank">freedns.afraid.org</a>
    </div>
  </div>
</div>

<h4 id="매직패킷">매직패킷</h4>

<p>매직 패킷은 특수한 패턴으로 구성된 패킷으로  <code class="language-plaintext highlighter-rouge">FF FF FF FF FF FF</code>뒤에 깨우고자 하는 대상 컴퓨터의 맥주소가 16번 반복되는 형태이다. 만약 <code class="language-plaintext highlighter-rouge">01:23:45:67:89:AB</code>가 맥주소라면,</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>FF FF FF FF FF FF 01 23 45 67 89 AB 01 23 45 67 89 AB ...
</code></pre></div></div>
<p>처럼 매직 패킷이 구성되게 된다. 사실 매직패킷구조를 몰랐을 때에는, 괜히 포트를 외부망에 개방하는 것이 걸렸는데, WOL포트를 통해서 할 수 있는 것은 매직 패킷보내는 것 뿐인데 외부인이 매직 패킷을 보낼 이유도 없고, 맥주소를 모르면서 부르트포스를 시도할 한가할 사람도 없을 것이며, 만에 하나 켜저도 전기 소비 조금 더 되고 아무 피해 없을 것이다…</p>

<h3 id="4-linux에서-wol-설정">4. linux에서 WOL 설정</h3>

<p>linux환경에서 WOL을 설정하는 방법은 window보다 간단하다.</p>

<ol>
  <li>먼저 네트워크 어댑터의 <code class="language-plaintext highlighter-rouge">interface 명</code>을 확인한다.
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@ksyu0508:~# <span class="nb">sudo </span>lshw <span class="nt">-C</span> network
  <span class="k">*</span><span class="nt">-network</span>                 
    description: Ethernet interface
    product: RTL8111/8168/8411 PCI Express Gigabit Ethernet Controller
    vendor: Realtek Semiconductor Co., Ltd.
    physical <span class="nb">id</span>: 0
    bus info: pci@0000:03:00.0
    logical name: <span class="o">{</span>interface 명<span class="o">}</span>
    version: 09
    serial: <span class="o">{</span>MAC 주소<span class="o">}</span>
    size: 1Gbit/s
    capacity: 1Gbit/s
    width: 64 bits
    clock: 33MHz
    capabilities: pm msi pciexpress msix vpd bus_master cap_list ethernet physical tp mii 10bt 10bt-fd 100bt 100bt-fd 1000bt-fd autonegotiation
    configuration: <span class="nv">autonegotiation</span><span class="o">=</span>on <span class="nv">broadcast</span><span class="o">=</span><span class="nb">yes </span><span class="nv">driver</span><span class="o">=</span>r8169 <span class="nv">driverversion</span><span class="o">=</span>6.5.11-4-pve <span class="nv">duplex</span><span class="o">=</span>full <span class="nv">firmware</span><span class="o">=</span>rtl8168f-1_0.0.5 06/18/12 <span class="nv">latency</span><span class="o">=</span>0 <span class="nb">link</span><span class="o">=</span><span class="nb">yes </span><span class="nv">multicast</span><span class="o">=</span><span class="nb">yes </span><span class="nv">port</span><span class="o">=</span>twisted pair <span class="nv">speed</span><span class="o">=</span>1Gbit/s
    resources: irq:16 ioport:e000<span class="o">(</span><span class="nv">size</span><span class="o">=</span>256<span class="o">)</span> memory:f0004000-f0004fff memory:f0000000-f0003fff
</code></pre></div>    </div>
  </li>
</ol>

<p>다음 명령으를 통해서 현재 WOL이 설정되어 있는지 확인할 수 있다. 상태가 <code class="language-plaintext highlighter-rouge">d</code>로 표시될 경우 WOL이 비활성화 된 상태이며, <code class="language-plaintext highlighter-rouge">g</code>로 표시되어야 활성화 된 것이다.</p>

<ul>
  <li>WOL 비활성화 상태:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@ksyu0508:~# ethtool <span class="o">{</span>interface 명<span class="o">}</span> | <span class="nb">grep </span>Wake-on
      Supports Wake-on: pumbg
      Wake-on: d
</code></pre></div>    </div>
  </li>
  <li>WOL 활성화 상태:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@ksyu0508:~# ethtool <span class="o">{</span>interface 명<span class="o">}</span> | <span class="nb">grep </span>Wake-on
      Supports Wake-on: pumbg
      Wake-on: g
</code></pre></div>    </div>
  </li>
</ul>

<p>아래 명령어를 통해서 WOL을 활성화 시킬 수 있다. 다만 일회성이고 재부팅 되면 다시 <code class="language-plaintext highlighter-rouge">d</code>로 돌아오기 때문에 다른 방법을 통해서 명령어가 컴퓨터 부팅시마다 계속 실행되게 해주어야 한다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@ksyu0508:~# ethtool <span class="nt">-s</span> <span class="o">{</span>interface 명<span class="o">}</span> wol g
</code></pre></div></div>

<ol>
  <li>linux의 스케줄러인 cron을 활용하여 서버가 부팅될 때마다 위 명령어를 실행시켜 줄 수 있다. cron 설정 파일을 연 다음,</li>
</ol>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@ksyu0508:~# crontab <span class="nt">-e</span>
</code></pre></div></div>

<p>아래 내용을 추가하여 주면 된다. <code class="language-plaintext highlighter-rouge">ethtool</code> 경로의 경우 자신의 환경에 맞게 넣어주면 된다. <code class="language-plaintext highlighter-rouge">cron</code>에서 <code class="language-plaintext highlighter-rouge">@reboot</code>로 실행 시 <code class="language-plaintext highlighter-rouge">$PATH</code>가 불러진 상태가 아니기 때문에 절대 경로로 넣어주어야 한다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@reboot /sbin/ethtool -s {interface 명} wol g
</code></pre></div></div>

<p>아래 사이트에서 방법을 참고하였으며, cron을 활용한 방법 이외에도 다양한 방법들이 소개되어 있으니 참고하면 좋을 것 같다.</p>
<div class="jekyll-linkpreview-wrapper">
  <div class="jekyll-linkpreview-wrapper-inner">
    <div class="jekyll-linkpreview-content">
      <div class="jekyll-linkpreview-image">
        <a href="https://wiki.archlinux.org/title/Wake-on-LAN" target="_blank">
          <img src="" />
        </a>
      </div>
    </div>
    <div class="jekyll-linkpreview-footer">
      <div class="jekyll-linkpreview-body">
        <h1 class="jekyll-linkpreview-title">
          <a href="https://wiki.archlinux.org/title/Wake-on-LAN" target="_blank">Wake-on-LAN - ArchWiki</a>
        </h1>
        <div class="jekyll-linkpreview-description">To query this status or to change the settings, install ethtool, determine the name of the network interface, and query it using the command:
</div>
      </div>
      <a href="wiki.archlinux.org" target="_blank">wiki.archlinux.org</a>
    </div>
  </div>
</div>

<h2 id="테스트">테스트</h2>
<p>설정이 완료되었다면, 공유기에서 제공하는 WOL 기능이나, linux의 <code class="language-plaintext highlighter-rouge">wakeonlan</code>패키지 활용하거나, Wake On Lan 어플을 통해서 WOL 매직 패킷을 전송할 수 있다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># sudo apt-get install wakeonlan</span>
<span class="c"># wakeonlan &lt;MAC-Address&gt;</span>
</code></pre></div></div>

<div class="jekyll-linkpreview-wrapper">
  <div class="jekyll-linkpreview-wrapper-inner">
    <div class="jekyll-linkpreview-content">
      <div class="jekyll-linkpreview-image">
        <a href="https://play.google.com/store/apps/details?id=co.uk.mrwebb.wakeonlan&amp;hl=ko" target="_blank">
          <img src="https://play-lh.googleusercontent.com/KfSXnrNMIUgbTq4t1X4zwipG8f252SF4OtJY8TIPsy1fLAX791z75ydRlZcBGDrjr6c" />
        </a>
      </div>
    </div>
    <div class="jekyll-linkpreview-footer">
      <div class="jekyll-linkpreview-body">
        <h1 class="jekyll-linkpreview-title">
          <a href="https://play.google.com/store/apps/details?id=co.uk.mrwebb.wakeonlan&amp;hl=ko" target="_blank">Wake On Lan - Google Play 앱</a>
        </h1>
        <div class="jekyll-linkpreview-description">빠르고 간단 해 WakeOnLAN / WOL!</div>
      </div>
      <a href="play.google.com" target="_blank">play.google.com</a>
    </div>
  </div>
</div>

<h2 id="후기">후기</h2>
<p><code class="language-plaintext highlighter-rouge">WOL</code> 기능을 활용할 수 없는 환경에서는 메인보드의 <code class="language-plaintext highlighter-rouge">Restore AC Power Loss</code> 옵션을 활용하여(메인보드 사마다 다를 수 있음) 스마트 플러그와 조합하면 간단하게 원경 부팅을 시도할 수 있다. 스마트 플러그를 이용한 원경 부팅 환경도 사용해 보았는데, 장점이라 한다면 <code class="language-plaintext highlighter-rouge">WOL</code>은 외부망에서 시도할 경우 포트개방, <code class="language-plaintext highlighter-rouge">WOL</code>관련 설정, 포트포워딩 등의 작업을 직접 수행해야하지만, 스마트플러그의 경우 자체적으로 제공해주는 앱에서 외부망 내부망 상관 없이 접근할 수 있기 때문에 상대적으로 간편하게 구성할 수 있으며 대기전력을 아예 0W로 만들어 버릴 수 있다. 이는 매직패킷을 수신하기 위해서 항상 랜카드에 최소한의 전력을 인가하여 대기시켜야만 하는 <code class="language-plaintext highlighter-rouge">WOL</code> 설정과는 대비되는 장점이라 할 수 있다. 단점도 소소하게 존재하는데, 전력을 아예 끊어버리기 때문에, 메인보드 수은 전지가 조금씩 소모되어 메인보드 설정이 날아갈 수도 있다는 약간의 리스크가 존재한다(방전되기 전에 컴퓨터 교체할 확률이 더 높음). 또, 전력이 끊켜도 PC 파워에는 일정 시간 전류가 남아있기 때문에, PC를 끄자마자 다시 켜기 위해서는 완전 방전을 위해서 조금 기다려주어야 한다. 이게 PC 상태를 바로 확인할 수 없는 외부 환경에서는 PC 종료하는 도중에 깜빡한게 떠올릴 경우 은근히 거슬리는 상황이 발생한다. 결과적으로는 본인의 상황에 맞추어서 원격 부팅 환경을 구현하면 좋을 것이다.</p>]]></content><author><name>ksyu0508</name></author><category term="linux" /><category term="linux" /><category term="NAS" /><category term="WOL" /><category term="Wake-on-Lan" /><category term="cron" /><summary type="html"><![CDATA[서론]]></summary></entry><entry><title type="html">Github blog 아이콘 변경</title><link href="https://ksyu0508.github.io/github%20blog/favicon/" rel="alternate" type="text/html" title="Github blog 아이콘 변경" /><published>2023-07-27T00:00:00+00:00</published><updated>2023-07-27T00:00:00+00:00</updated><id>https://ksyu0508.github.io/github%20blog/favicon</id><content type="html" xml:base="https://ksyu0508.github.io/github%20blog/favicon/"><![CDATA[<h2 id="서론">서론</h2>

<p>깃헙 블로그 개설 후 여러가지 부분을 커스터마이징하고 있는데 아직 상단바에 뜨는 아이콘을 변경하지 않았다. 검색해보니 이것의 명칭이 <code class="language-plaintext highlighter-rouge">파비콘(favicon)</code>이라는 것을 알 수 있었다. 이번 포스팅에서는 간단하게 파비콘을 바꾸는 방법에 대해서 소개하고자 한다.</p>

<h2 id="파비콘으로-사용할-이미지">파비콘으로 사용할 이미지</h2>
<p><img src="https://onedrive.live.com/embed?resid=C5BC7ED83BDA0D3B%2110239&amp;authkey=%21ABSsVXba8W259ws&amp;width=240&amp;height=240" alt="" />
<em><center>블로그에 사용할 png 파일</center></em></p>

<p>favicon으로 사용할 이미지 파일을 먼저 구해야 한다. 오픈 소스 아이콘 파일을 제공하는 아래 사이트에서 블로그 색상에 맞추어서 다운로드 하였다. 어차피 작게 보이기 때문에 너무 화려한 아이콘은 의미가 없을 듯 해서 심플한 아이콘으로 골랐다. 만약 다른 이미지를 블로그에 사용하려고 할 때에, 블로그에 광고가 달려 있을 경우에 상업적 이용으로 간주 될 수 있기 때문에 이 점을 유의하면서 찾으면 될 것 같다.</p>

<div class="jekyll-linkpreview-wrapper">
  <div class="jekyll-linkpreview-wrapper-inner">
    <div class="jekyll-linkpreview-content">
      <div class="jekyll-linkpreview-image">
        <a href="https://boxicons.com/" target="_blank">
          <img src="http://boxicons.com/static/img/og-image.png" />
        </a>
      </div>
    </div>
    <div class="jekyll-linkpreview-footer">
      <div class="jekyll-linkpreview-body">
        <h1 class="jekyll-linkpreview-title">
          <a href="https://boxicons.com/" target="_blank">Boxicons : Premium web friendly icons for free</a>
        </h1>
        <div class="jekyll-linkpreview-description">Boxicons is a free collection of carefully crafted open source icons. Each icon is designed on a 24px grid with the material guidelines</div>
      </div>
      <a href="boxicons.com" target="_blank">boxicons.com</a>
    </div>
  </div>
</div>

<h2 id="이미지-파비콘-변환">이미지 파비콘 변환</h2>

<div class="jekyll-linkpreview-wrapper">
  <div class="jekyll-linkpreview-wrapper-inner">
    <div class="jekyll-linkpreview-content">
      <div class="jekyll-linkpreview-image">
        <a href="https://www.favicon-generator.org/" target="_blank">
          <img src="" />
        </a>
      </div>
    </div>
    <div class="jekyll-linkpreview-footer">
      <div class="jekyll-linkpreview-body">
        <h1 class="jekyll-linkpreview-title">
          <a href="https://www.favicon-generator.org/" target="_blank">Favicon &amp; App Icon Generator</a>
        </h1>
        <div class="jekyll-linkpreview-description">Convert PNG to ICO, JPG to ICO, GIF to ICO.  Create favicon.ico and iOS / Android App Icons.  Edit a favicon to fit your needs, or search our gallery.</div>
      </div>
      <a href="www.favicon-generator.org" target="_blank">www.favicon-generator.org</a>
    </div>
  </div>
</div>

<p>사실 16x16의 png파일을 그대로 적용해도 크게 상관 없다. 다만 다양한 기기에 블로그가 노출될 때에 그에 맞추어서 이미지를 제공하지 못한다면 아이콘의 해상도가 많이 떨어져 보일 수 있을 것이다. 위 사이트에서 간단하게 이미지 파일을 여러 크기의 파비콘으로 변환하고 그에 맞는 HTML 태그까지 자동 생성해준다.</p>

<p><img src="https://onedrive.live.com/embed?resid=C5BC7ED83BDA0D3B%2110235&amp;authkey=%21AFGgdXZgOgPnRwM&amp;width=660&amp;height=999999" alt="" />
<em><center>사용할 이미지 삽입(www.favicon-generator.org)</center></em></p>

<p>사이트에 접속 후 자신이 사용할 이미지 파일을 넣어준다.</p>

<p><img src="https://onedrive.live.com/embed?resid=C5BC7ED83BDA0D3B%2110236&amp;authkey=%21AH5r8goGqxn3gLU&amp;width=660&amp;height=999999" alt="" />
<em><center>생성된 favicon 및 HTML 태그(www.favicon-generator.org)</center></em></p>

<p><code class="language-plaintext highlighter-rouge">Download the generated favicon</code>을 눌러서 zip파일을 저장한 후에 깃헙 블로그 레퍼지토리에 파비콘 파일들을 위치시켜 주면 된다. 경로는 <code class="language-plaintext highlighter-rouge">/assets</code> 폴더 아무데다 위치시켜도 상관 없고, 일단 <code class="language-plaintext highlighter-rouge">/assets/icon</code>폴더를 만들어 그 안에 저장하였다.</p>

<p><img src="https://onedrive.live.com/embed?resid=C5BC7ED83BDA0D3B%2110237&amp;authkey=%21AEnJyUsJJDhjArU&amp;width=255&amp;height=660" alt="" />
<em><center>/assets/icon 폴더 생성 후 생성된 favicon 넣기</center></em></p>

<h3 id="블로그-header-변경">블로그 header 변경</h3>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
</pre></td><td class="code"><pre><span class="nt">&lt;head&gt;</span>
  <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"utf-8"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;meta</span> <span class="na">http-equiv=</span><span class="s">"X-UA-Compatible"</span> <span class="na">content=</span><span class="s">"IE=edge"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">"viewport"</span> <span class="na">content=</span><span class="s">"width=device-width, initial-scale=1"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">"google-site-verification"</span> <span class="na">content=</span><span class="s">"gL7v_rlH_MgG02OOs9glh9YTXQWTVfYIW0XuwyYIPQk"</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">"google-translate-customization"</span> <span class="na">content=</span><span class="s">"108d9124921d80c3-80e20d618ff053c8-g4f02ec6f3dba68b7-c"</span><span class="nt">&gt;&lt;/meta&gt;</span>

  <span class="c">&lt;!-- favicon 추가  --&gt;</span>
  <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"stylesheet"</span> <span class="na">type=</span><span class="s">"text/css"</span> <span class="na">href=</span><span class="s">"/assets/css/linkpreview.css"</span> <span class="na">media=</span><span class="s">"screen"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"apple-touch-icon"</span> <span class="na">sizes=</span><span class="s">"57x57"</span> <span class="na">href=</span><span class="s">"/assets/icon/apple-icon-57x57.png"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"apple-touch-icon"</span> <span class="na">sizes=</span><span class="s">"60x60"</span> <span class="na">href=</span><span class="s">"/assets/icon/apple-icon-60x60.png"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"apple-touch-icon"</span> <span class="na">sizes=</span><span class="s">"72x72"</span> <span class="na">href=</span><span class="s">"/assets/icon/apple-icon-72x72.png"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"apple-touch-icon"</span> <span class="na">sizes=</span><span class="s">"76x76"</span> <span class="na">href=</span><span class="s">"/assets/icon/apple-icon-76x76.png"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"apple-touch-icon"</span> <span class="na">sizes=</span><span class="s">"114x114"</span> <span class="na">href=</span><span class="s">"/assets/icon/apple-icon-114x114.png"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"apple-touch-icon"</span> <span class="na">sizes=</span><span class="s">"120x120"</span> <span class="na">href=</span><span class="s">"/assets/icon/apple-icon-120x120.png"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"apple-touch-icon"</span> <span class="na">sizes=</span><span class="s">"144x144"</span> <span class="na">href=</span><span class="s">"/assets/icon/apple-icon-144x144.png"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"apple-touch-icon"</span> <span class="na">sizes=</span><span class="s">"152x152"</span> <span class="na">href=</span><span class="s">"/assets/icon/apple-icon-152x152.png"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"apple-touch-icon"</span> <span class="na">sizes=</span><span class="s">"180x180"</span> <span class="na">href=</span><span class="s">"/assets/icon/apple-icon-180x180.png"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"icon"</span> <span class="na">type=</span><span class="s">"image/png"</span> <span class="na">sizes=</span><span class="s">"192x192"</span>  <span class="na">href=</span><span class="s">"/assets/icon/android-icon-192x192.png"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"icon"</span> <span class="na">type=</span><span class="s">"image/png"</span> <span class="na">sizes=</span><span class="s">"32x32"</span> <span class="na">href=</span><span class="s">"/assets/icon/favicon-32x32.png"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"icon"</span> <span class="na">type=</span><span class="s">"image/png"</span> <span class="na">sizes=</span><span class="s">"96x96"</span> <span class="na">href=</span><span class="s">"/assets/icon/favicon-96x96.png"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"icon"</span> <span class="na">type=</span><span class="s">"image/png"</span> <span class="na">sizes=</span><span class="s">"16x16"</span> <span class="na">href=</span><span class="s">"/assets/icon/favicon-16x16.png"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"manifest"</span> <span class="na">href=</span><span class="s">"/assets/icon/manifest.json"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">"msapplication-TileColor"</span> <span class="na">content=</span><span class="s">"#ffffff"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">"msapplication-TileImage"</span> <span class="na">content=</span><span class="s">"/assets/icon/ms-icon-144x144.png"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">"theme-color"</span> <span class="na">content=</span><span class="s">"#ffffff"</span><span class="nt">&gt;</span>

  <span class="c">&lt;!-- &lt;link rel="shortcut icon" href=""&gt; --&gt;</span>
  <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"stylesheet"</span> <span class="na">href=</span><span class="s">"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"stylesheet"</span> <span class="na">href=</span><span class="s">"https://cdn.jsdelivr.net/npm/typeface-noto-sans@0.0.72/index.min.css"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"stylesheet"</span> <span class="na">href=</span><span class="s">"/assets/css/main.css"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"/assets/js/main.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;/head&gt;</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>자신의 블로그의 header 내용을 담고 있는 html 파일을 찾아서 헤더에 기존 favicon을 넣는 태그가 있으면 제거하고, 사이트에서 제공하는 HTML 태그를 그대로 복사하여 붙혀넣기 해주면 된다. href에 이미지 위치가 반영이 되있지 않기 때문에 `` + <code class="language-plaintext highlighter-rouge">이미지 파일 저장 경로</code>를 모두 추가해주면 된다.</p>

<h2 id="후기">후기</h2>

<p><img src="https://onedrive.live.com/embed?resid=C5BC7ED83BDA0D3B%2110240&amp;authkey=%21ACHnDpZs9c5izbg&amp;width=350&amp;height=135" alt="" />
<em><center>적용된 favicon의 모습</center></em></p>

<p>간단하게 favicon 적용하는 방법에 대해서 알아 보았다.</p>]]></content><author><name>ksyu0508</name></author><category term="github blog" /><category term="favicon" /><summary type="html"><![CDATA[서론]]></summary></entry><entry><title type="html">Hare and Hounds 구현</title><link href="https://ksyu0508.github.io/python/HAH/" rel="alternate" type="text/html" title="Hare and Hounds 구현" /><published>2023-07-26T00:00:00+00:00</published><updated>2023-07-26T00:00:00+00:00</updated><id>https://ksyu0508.github.io/python/HAH</id><content type="html" xml:base="https://ksyu0508.github.io/python/HAH/"><![CDATA[<h2 id="서론-hare-and-hounds">서론: Hare and Hounds</h2>

<p><img src="https://www.nintendo.com/sg/switch/as7t/img/hero.jpg" alt="" />
<em><center>Clubhouse Games™: 51 Worldwide Classics(닌텐도)</center></em></p>

<p>처음 들으면 사실 생소한 게임이다. 본인도 닌텐도 스위치에 있는 <code class="language-plaintext highlighter-rouge">Clubhouse Games™: 51 Worldwide Classics</code>라는 게임에서 처음 접한 미니 게임이다. 단순한 보드게임인 만큼 트리 탐색 알고리즘을 통해서 컴퓨터 플레이어를 충분히 만들 수 있을 것이라 생객해서 alpha-beta pruning을 이용한 python CLI 게임을 간단히 만들어 보았다. 무슨 게임인지 빠르게 체험해보고 싶으면 다른 사람이 구현한 사이트를 참고해보아도 좋을 것 같다.</p>

<div class="jekyll-linkpreview-wrapper">
  <div class="jekyll-linkpreview-wrapper-inner">
    <div class="jekyll-linkpreview-content">
      <div class="jekyll-linkpreview-image">
        <a href="https://www.neok12.com/games/hare-hounds/hare-hounds.htm" target="_blank">
          <img src="" />
        </a>
      </div>
    </div>
    <div class="jekyll-linkpreview-footer">
      <div class="jekyll-linkpreview-body">
        <h1 class="jekyll-linkpreview-title">
          <a href="https://www.neok12.com/games/hare-hounds/hare-hounds.htm" target="_blank">Play Hare and Hounds - Educational Games and Puzzles</a>
        </h1>
        <div class="jekyll-linkpreview-description">Play Hare and Hounds and other educational games, brain games and puzzles online at NeoK12</div>
      </div>
      <a href="www.neok12.com" target="_blank">www.neok12.com</a>
    </div>
  </div>
</div>

<h2 id="게임-규칙">게임 규칙</h2>

<p>말은 사냥개(hound)와 토끼(hare) 총 2종류가 존재하며, 각각의 승리 조건이 존재한다.</p>

<ul>
  <li>사냥개는 토끼를 움직일 수 없도록 가두면 승리</li>
  <li>토끼는 맨 왼쪽 끝에 도달하거나 일정 턴수를 넘기면 승리</li>
</ul>

<p>턴수 제한은 사냥개가 시작 지점에서 비키지 않으면 토끼가 절대 승리하지 못하기 때문에 존재하는 것 같다. 말을 움직이는 방법은 다음과 같다.</p>

<ol>
  <li>사냥개 선공</li>
  <li>말은 한 번에 한 칸씩만 움직일 수 있음</li>
  <li>이동은 흰색 선을 따라서만 가능</li>
  <li>토끼는 모든 방향으로 이동 가능하지만, 사냥개는 뒤(왼쪽) 방향으로 이동 불가</li>
</ol>

<h2 id="코드">코드</h2>

<div class="jekyll-linkpreview-wrapper">
  <div class="jekyll-linkpreview-wrapper-inner">
    <div class="jekyll-linkpreview-content">
      <div class="jekyll-linkpreview-image">
        <a href="https://github.com/ksyu0508/hare_and_hounds" target="_blank">
          <img src="https://opengraph.githubassets.com/055eb774c3e0368c735b79a5c147e29b2fb4f7d86cd38a11afdadf5eab4e683c/ksyu0508/hare_and_hounds" />
        </a>
      </div>
    </div>
    <div class="jekyll-linkpreview-footer">
      <div class="jekyll-linkpreview-body">
        <h1 class="jekyll-linkpreview-title">
          <a href="https://github.com/ksyu0508/hare_and_hounds" target="_blank">GitHub - ksyu0508/hare_and_hounds: python implementaion of hare and hounds game with AI</a>
        </h1>
        <div class="jekyll-linkpreview-description">python implementaion of hare and hounds game with AI - GitHub - ksyu0508/hare_and_hounds: python implementaion of hare and hounds game with AI</div>
      </div>
      <a href="github.com" target="_blank">github.com</a>
    </div>
  </div>
</div>

<h2 id="휴리스틱-함수">휴리스틱 함수</h2>

<p>이 코드는 Hare and Hounds 게임에서 사용될 휴리스틱 함수(heuristic)를 구현한 부분이다. 휴리스틱 함수는 게임 상태를 평가하여 AI가 최적의 수를 선택하는 데 도움을 주는 함수이다. 휴리스틱 함수는 현재 말판 상태만으로 상황을 점수화 시켜서 판단할 수 있어야 하는데, 어느 상태가 사냥개 혹은 토끼한테 확실히 유리한 상황인지를 직접 플레이하면서 휴리스틱 함수의 요소와 각각의 가중치를 설정하였다. 휴리스틱 함수에 사용된 주요 요소들은 다음과 같다:</p>

<ol>
  <li>
    <p>토끼 왼쪽에 늑대가 있는 경우: 토끼가 늑대의 왼쪽에 있을수록 높은 점수를 부여,</p>
  </li>
  <li>
    <p>맨 오른쪽 구석에 들어갈 시 페널티: 늑대가 맨 오른쪽에 들어가는 수는 무조건 안 좋은 수, 승리할 수 있는 방법이 사라짐.</p>
  </li>
  <li>
    <p>공간 점수:</p>

    <p>3-1. 늑대로 토끼와 도착지점 사이를 분리시킬 경우 점수</p>

    <p>3-2. 토끼 주변에 갈수 있는 영역의 수에 따라서 점수 제공, 가까울수록 높은 가중치의 점수</p>
  </li>
</ol>

<p>이렇게 구현된 휴리스틱 함수를 Alpha-Beta 알고리즘과 함께 사용하여 AI가 게임을 플레이하고 최적의 수를 선택하도록 할 수 있다. 완벽한 휴리스틱이라고는 자신할 수 없지만, 위에 링크한 사이트의 HARD 인공지능과 대결 시키면 거의 최적의 수를 제공한다고 생각할 정도의 성능을 보여준다.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
</pre></td><td class="code"><pre><span class="k">def</span> <span class="nf">heuristic</span><span class="p">(</span><span class="n">state</span><span class="p">):</span>
    <span class="n">total_h</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="c1"># h func for hound
</span>    <span class="c1"># minus score for hare
</span>
    <span class="c1"># 1. 토끼 왼쪽에 늑대 있을 수록 점수
</span>    <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span>

    <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">state</span><span class="p">[</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">]</span> <span class="o">==</span> <span class="s">'R'</span><span class="p">:</span>
                <span class="n">hare</span> <span class="o">=</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>

    <span class="n">hounds</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">state</span><span class="p">[</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">]</span> <span class="o">==</span> <span class="s">'H'</span><span class="p">:</span>
                <span class="n">hounds</span><span class="p">.</span><span class="n">append</span><span class="p">((</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">))</span>
                <span class="k">if</span> <span class="n">hare</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">hounds</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">]:</span>
                    <span class="n">cnt</span> <span class="o">+=</span> <span class="mi">1</span>
    
    <span class="n">total_h</span> <span class="o">+=</span> <span class="mi">500</span> <span class="o">*</span> <span class="n">cnt</span>

    <span class="c1"># 2. 맨 오른쪽 구석에 들어갈 시 페널티
</span>    <span class="k">if</span> <span class="n">state</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span> <span class="o">==</span> <span class="s">'H'</span><span class="p">:</span>
        <span class="n">total_h</span> <span class="o">+=</span> <span class="o">-</span><span class="mi">5000</span>

    <span class="c1"># 3. 늑대로 닫힌 공간을 만들 경우 점수, 공간이 좁아질 수록 점수 높아짐
</span>
    <span class="c1"># BFS
</span>    <span class="n">visited</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">False</span><span class="p">]</span> <span class="o">*</span> <span class="mi">5</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">)]</span>
    <span class="n">visited</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="bp">True</span>
    <span class="n">visited</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="bp">True</span>
    <span class="n">visited</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="bp">True</span>
    <span class="n">visited</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="bp">True</span>

    <span class="n">distance</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="mi">5</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">)]</span>
    
    <span class="k">for</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="ow">in</span> <span class="n">hounds</span><span class="p">:</span>
        <span class="n">visited</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">=</span> <span class="bp">True</span>

    <span class="n">q</span> <span class="o">=</span> <span class="n">deque</span><span class="p">([</span><span class="n">hare</span><span class="p">])</span>

    <span class="k">while</span> <span class="n">q</span><span class="p">:</span>
        <span class="n">current_node</span> <span class="o">=</span> <span class="n">q</span><span class="p">.</span><span class="n">popleft</span><span class="p">()</span>
        <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">current_node</span>

        <span class="k">for</span> <span class="n">next_x</span><span class="p">,</span> <span class="n">next_y</span> <span class="ow">in</span> <span class="n">connections</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]:</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">visited</span><span class="p">[</span><span class="n">next_x</span><span class="p">][</span><span class="n">next_y</span><span class="p">]:</span>
                <span class="n">visited</span><span class="p">[</span><span class="n">next_x</span><span class="p">][</span><span class="n">next_y</span><span class="p">]</span> <span class="o">=</span> <span class="bp">True</span>
                <span class="n">distance</span><span class="p">[</span><span class="n">next_x</span><span class="p">][</span><span class="n">next_y</span><span class="p">]</span> <span class="o">=</span> <span class="n">distance</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span>
                <span class="n">q</span><span class="p">.</span><span class="n">append</span><span class="p">((</span><span class="n">next_x</span><span class="p">,</span> <span class="n">next_y</span><span class="p">))</span>

    <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">):</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">visited</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]:</span>
                <span class="n">cnt</span> <span class="o">+=</span> <span class="mi">1</span>
    
    <span class="c1"># 3-1. 토끼가 1,0에 도달하지 못하는 경우, 즉 늑대에 의해서 둘러 싸인 경우
</span>    <span class="k">if</span> <span class="ow">not</span> <span class="n">visited</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">]:</span> 
        <span class="n">total_h</span> <span class="o">+=</span> <span class="mi">5000</span>

    <span class="c1"># 3-2. 토끼 기준 주변 공간 점수, 가까운 영역일수록 높은 점수(늑대 기준 음수)
</span>
    <span class="n">distance_weight</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span>
    <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">):</span>
            <span class="n">total_h</span> <span class="o">+=</span> <span class="o">-</span><span class="mi">100</span> <span class="o">*</span> <span class="n">distance_weight</span><span class="p">[</span><span class="n">distance</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]]</span>

    <span class="k">return</span> <span class="n">total_h</span>
</pre></td></tr></tbody></table></code></pre></figure>]]></content><author><name>ksyu0508</name></author><category term="python" /><category term="게임" /><category term="알고리즘" /><category term="Alpha-Beta pruning" /><category term="minmax algorithm" /><summary type="html"><![CDATA[서론: Hare and Hounds]]></summary></entry><entry><title type="html">E-M10 mark II 화면 수리</title><link href="https://ksyu0508.github.io/tech/E-M10II/" rel="alternate" type="text/html" title="E-M10 mark II 화면 수리" /><published>2023-07-25T00:00:00+00:00</published><updated>2023-07-25T00:00:00+00:00</updated><id>https://ksyu0508.github.io/tech/E-M10II</id><content type="html" xml:base="https://ksyu0508.github.io/tech/E-M10II/"><![CDATA[<h2 id="서론">서론</h2>

<p><img src="https://youtu.be/FqXUqvoAd1s" alt="" /></p>

<p>중고로 미러리스를 하나 샀다. 올림푸스의 E-M10 mark II 모델이다. 시세보다 저렴하게 살 수 있어서 바로 구매하였다. 외관상으로 기스가 따로 보이지는 않기도 했고 주인도 하자가 없는 것으로 말했는데 막상 받아보니 LCD 화면에 문제가 있었다. E-M10 II의 LCD 화면은 틸트를 지원하는데, 틸트를 어느정도 각도로 맞추지 않으면 화면이 나오지 않는 것이다… 틸트를 쓸 때만 화면이 나오지 않는다면 그냥 무시하고 사용할 수 있는데, 그렇지 않아서 조금 당황했다. 그래도 조금 만져보다 보니 LCD와 연결된 리본 케이블의 접촉불량인 것으로 확인되어 그냥 알리에서 케이블을 구매해서 직접 수리하기로 하였다.</p>

<p><img src="https://dsm01pap005files.storage.live.com/y4m4KfgNod__p3leOFdRD7puhzdxOIlxEeqdaE_4t5xCq7zBUYbP8BUsFGeBuAAnMztHDD_ftexUljLfv9UIF6NQxiLPEKZLAwRC75jBCT3BSKafLD80wFjBBgIKdS2B0bUuu1_gjozlwnpoyHreeAj2EMeog0VcE0ffpKM-HrhKOchn-wswvWIoEkwOZvNKaUC?width=660&amp;height=660&amp;cropmode=none" alt="" />
<em><center>알리발 케이블 2pc</center></em></p>

<h2 id="화면-수리-과정">화면 수리 과정</h2>

<p><img src="https://youtu.be/vO3kgDNdyN4" alt="" /></p>

<p>전체적인 수리과정은 위 영상을 참고하여 진행하였다. LCD와 카메라를 연결한 리본 케이블을 교체하기 위해서 화면을 포함한 뒷판과 카메라를 먼저 분리하여야 한다.</p>

<p><img src="https://dsm01pap005files.storage.live.com/y4mof48S8XYyoo-fag7yCaDbQtFB1Et7ByUS8YO4xpgJNrVX-pOmRxBZa7xqSx4zhr6pJ4VsPLpydlbLJ4N7whnTele3GNXlEYU46DRDYUZzZMoaKKodJa9TN3mignBlJZ7So9hwMweiD-vXoWxk2gOfb3jc_68dy49rbhtODIF6TYBPhLSx3iiqVV_elJw7Ige?width=660&amp;height=660&amp;cropmode=none" alt="" /></p>

<p>하판에 있는 나사를 전부 풀어준다.</p>

<p><img src="https://dsm01pap005files.storage.live.com/y4mqGlY_bT3-XOG2cvzG8olsNpXCI2NRmKxLq0FR3OXp1hZkLxqHKQAkZgkwSvcdDU0jByZDss__7uc48fh4GP8EHh8skm1JYvQA3L9Hfe1E_a-c269JL3cHy1HIhBdM67TYmZt0KC-DVgeA2DumOBf2haQKkCwrhsr2D3UZEX1aIAYX52S26PklxUi0CXb65FR?width=660&amp;height=660&amp;cropmode=none" alt="" /></p>

<p>옆면에 포트 단자 윗쪽에 숨어있는 나사를 풀어준다.</p>

<p><img src="https://dsm01pap005files.storage.live.com/y4mF-4ijG-tlGoifaLKXQM2Y5YT867Vb1pffWxmsojcfqnq7OKGnbJJR7QNxnWu3p7JwSkrz06DjcUgHURuXnbIrx68PfD89EaQhOn9yF-vb7lB8vdcY6ldFqCuzzpGYOUBWRGIsoe87ijgrLugmN3xkuEAl_k1Nz78VlQUooxxj_VMlQszIwtTE4sAbm1KQF3n?width=660&amp;height=660&amp;cropmode=none" alt="" /></p>

<p>LCD 화면 뒤에 숨어있는 나사 3개를 전부 풀어준다.</p>

<p><img src="https://dsm01pap005files.storage.live.com/y4mcuyVlJOPBv0WqBtA3fubEUj9SLbSum2j_TzR5tx4zOIubHQ8KGpv8Nqa12MAAFSWt1y7mYXAQ5ohh2VovC6fwFtiCPyjThCfezNTD1tPlyqnoKhQmLq_9BISH5XC88tpaE4PgHoLssYEk6JWUk4lItYI7YBnCKbcp4320K-wmSiSMA7ORAtr8L7gI2QCK2bH?width=660&amp;height=660&amp;cropmode=none" alt="" /></p>

<p>나사를 전부 풀었다면 카메라 뒷판과 카메라 본체가 분리가 된다. 이때 뒷판과 본체를 이어주는 케이블 2개를 분리해주면 완전이 서로 분리시킬 수 있다. 카메라 바디캡이 없어서 그냥 렌즈 끼운채로 분해를 했다.</p>

<p><img src="https://dsm01pap005files.storage.live.com/y4mcH3ewdBlAkftwFzKhsbAbAU6iX1lBJ5_CHf0ZmKv_4xnAjQlmezgKuKPFbiORSXrq6KIHzn541CBJMjeOeQHALKmv5y_spdlrf_1CpvDJyeqs4vyeWQ4twfOt-2bKErrV_PrOQgqUpZR1QiIeaegkgh7P0HpEDJ5xiiwbJfX2DeBsFSiWoYsNwAhK2KW8hFP?width=660&amp;height=660&amp;cropmode=none" alt="" /></p>

<p>분리한 뒷판의 모습이다. 은색 철판의 나사를 전부 풀어주게 되면 뒷면에 연결되어 있는 화면의 힌지가 분리되게 된다. 그렇지만 케이블은 그대로 연결되어 있기 때문에, 케이블을 구멍에 맞추어서 잘 빼내어야 한다.</p>

<p><img src="https://dsm01pap005files.storage.live.com/y4mLk_FRO9Qf1l1Q5ty1vNJ2qCOPyiJR5WumMI6FrrAjcy2Kz0LSwlOpL3rtsVu5cqZ9_fqFHf3IMbTp9IFg_bsW6X04r6EJqMIOgKsMf90NZG7EEf8dtQvrr5fgixtqbnPrK5923UzX0jRaAtMCxRcjuEECyY1nzLiqOEV0sab5O1Fkdi7PnqSXIZIPl89zbwc?width=660&amp;height=660&amp;cropmode=none" alt="" /></p>

<p>힌지와 LCD 화면만 남은 모습이다. 마찬가지로 나사를 전부 풀고 구멍에 케이블을 잘 통과시켜서 빼내면 힌지와 화면을 분리할 수 있다.</p>

<p><img src="https://dsm01pap005files.storage.live.com/y4mPQkATbdL8-HtvbsUXu4yLNtk7G-sLV3BvdcO1cDDLQbuCuuF9WYGngGJtkqkCCYJTQaMF17WIIl3PzlqaD23B8WA89X9olmJPiOgfYjYpPLGp-WtayXkUGz_QEiGyQw0GbPf8PPZepid9uNU3IfPIUKiBlMhFGsT8IdqkUjzgrA94GGW1PVRIiwLw-yF6KEG?width=660&amp;height=660&amp;cropmode=none" alt="" /></p>

<p>마지막으로 화면만 남은 상태이다. 다른 케이블은 그냥 꼽으면 되는데 납땜이 되어있는 부분이 있다.</p>

<p><img src="https://dsm01pap005files.storage.live.com/y4mw9RfHaQ43qIGJeLEtApfpIPbzoTBKpEJUV10Zu58Kugdgy0yWLNmhR_-1UJj9Koe61yFTV1yHOAwjh14BFnR548OMjQe2k_XH52zsgqjjFQDZ9_TbcILNizntHhA-pkbXOvss9la8d5XAbC5nnFc1MKFdwyBLN1WEu8ZFSt_fpOSvB3CM9VZoyvMACVvVefL?width=660&amp;height=660&amp;cropmode=none" alt="" /></p>

<p>인두기를 이용해서 납땜된 기존 케이블을 떼어내고 새 케이블을 다시 납땜하면 된다.</p>

<p><img src="https://dsm01pap005files.storage.live.com/y4mb0MoKvGZ7owGQTdaShUqyHIZXkoaVIzE1lZJvmJj3FPydRkYXlBwmTWUBm7sp3H2juyB8XhV2Jfty1LDpnPEOVZd6NGPMXt3Cg1G1qIDGaV46NmcFGbLr6f-W5gRKw4heOpbbHSo6YvmFICH_Cps_OGdBinoL8tC49IdSUwysNz4En4yB31OHKW0dyHAT0CQ?width=660&amp;height=660&amp;cropmode=none" alt="" /></p>

<p>원상태의 케이블을 저렇게 꼬인 형태로 똑같이 접어서 만들어서 다시 부품들의 좁은 구명에 통과시켜서 조립해야한다.</p>

<p><img src="https://dsm01pap005files.storage.live.com/y4mOzkg6Eba9doYrhKv4txkrIi4ZGtasNN03Ydm8sWHgQ7dBcyq0L2fd6cuuoPc_bmYPuvRBpeLu3CnLiIkO9NZcASanz2W8PS1aFcvZXOeVaeQ5t3Jz8uRZRgjvr0oUGmgHBU0vsCjlcbqLoVZ1M1MaJ1B5PwC0ooq_ffgCwyZpNx_w6LMOaytnmOYFgGWtEv1?width=660&amp;height=660&amp;cropmode=none" alt="" /></p>

<p>케이블 전부 연결하고 마지막으로 가조립해서 정상 작동하는지 확인한다. 다행히도 한번만에 화면이 정상적으로 작동하는 모습을 확인할 수 있었다.</p>

<h2 id="후기">후기</h2>

<p><img src="https://dsm01pap005files.storage.live.com/y4mPdZKY8sZKDn3TrDnNBhCA9hEFb9GmqBmwoQhkhc9OmIZyKiDjhCoT315mIa1n6lQJMJWV9YmYmgvVemNGex976GahAZviwhe79PRap_zgjhXgpx_ebI89tjmbH3-uhIiN5t_CF3p1C5inchSv4OeNic2eJ0iuRfXKrs-0slitvvRCp3pgzXcYUpGMvdcZM5y?width=1024&amp;height=768&amp;cropmode=none" alt="" />
<em><center>nikon FM2</center></em></p>

<p>수리한 E-M10 II를 이용해서 사진을 촬영해보았다. 사진 찍는데는 뷰파인더를 이용해서 찍으면 되기에 원래부터 문제는 없었지만, 그래도 화면을 이용해서 조금더 편리하게 촬영하고 바로 사진을 확인할 수 있게 되었다. 리본 케이블 자체가 쉽게 단선이 나는 부품이다. 거기에 알리산 케이블이 정품 케이블보다 얇고 빳빳한 느낌이 있기 때문에, 틸트 기능은 최대한 필요할 때만 사용해서 다시 수리할 일이 없도록 조심히 다루어야 할 것 같다.</p>]]></content><author><name>ksyu0508</name></author><category term="Tech" /><category term="카메라" /><category term="E-M10 mark II" /><summary type="html"><![CDATA[서론]]></summary></entry><entry><title type="html">백준 1055번 문제 풀이</title><link href="https://ksyu0508.github.io/problem%20solving/boj-1055/" rel="alternate" type="text/html" title="백준 1055번 문제 풀이" /><published>2023-07-18T00:00:00+00:00</published><updated>2023-07-18T00:00:00+00:00</updated><id>https://ksyu0508.github.io/problem%20solving/boj-1055</id><content type="html" xml:base="https://ksyu0508.github.io/problem%20solving/boj-1055/"><![CDATA[<h2 id="문제">문제</h2>

<div class="jekyll-linkpreview-wrapper">
  <div class="jekyll-linkpreview-wrapper-inner">
    <div class="jekyll-linkpreview-content">
      <div class="jekyll-linkpreview-image">
        <a href="https://www.acmicpc.net/problem/1055" target="_blank">
          <img src="" />
        </a>
      </div>
    </div>
    <div class="jekyll-linkpreview-footer">
      <div class="jekyll-linkpreview-body">
        <h1 class="jekyll-linkpreview-title">
          <a href="https://www.acmicpc.net/problem/1055" target="_blank">1055번: 끝이없음</a>
        </h1>
        <div class="jekyll-linkpreview-description">이 Endless 프로그램이 하는 일은 다음과 같다. 어떤 문자열 S가 정의되어 있다. 이 문자열 S는 알파벳 소문자와 ‘\$’로 이루어져 있다. 이제 S에서 ‘\$’를 입력으로 들어온 문자열로 모두 바꾼 후에 출력한다.</div>
      </div>
      <a href="www.acmicpc.net" target="_blank">www.acmicpc.net</a>
    </div>
  </div>
</div>

<h2 id="풀이-해설">풀이 해설</h2>

<h3 id="점화식">점화식</h3>

<p>$i$번째 실행의 총 문자열 길이를 $A_i$, 처음 입력 문자열의 길이를 $l$, 두번째 입력 문자열에서 <code class="language-plaintext highlighter-rouge">$</code>의 개수를 $n$, <code class="language-plaintext highlighter-rouge">$</code> 를 제외한 문자열의 길이를 $m$이라 한다면</p>

<p>$$A_i = n * A_{i-1} + m $$</p>

<p>0번 실행 시 $ A_0 = l $라 가정한다면,</p>

<p>$$A_i = m \times \cfrac{n^i - 1}{n-1} + n^i \times l $$</p>

<p>따라서 $i$번 실행시 총 문자열의 길이를 계산해 낼 수 있기 때문에, modular를 잘 활용한다면, 특정 자리수의 문자열이 무엇인지 구할 수 있게 되고, 문제를 풀어낼 수 있게 된다.</p>

<p>다만, 문제 조건에서 처음 문자열의 길이가 최대 50, 두번째 문자열의 길이가 2~50, 실행 횟수가 1 ~ 1,000,000,000이기 때문에, 최악의 경우를 생각한다면, 50개 자리 문자열 입력, 그리고 실행 횟수가 $10^{9}$일 경우에, 문자열의 길이는 대충 $50^{10^{9}}$ 정도의 경이로운 숫자가 나올 수 있다.</p>

<p>이는 문자열을 직접 구하는 것은 물론이고, 문자열의 길이조차 직접 계산하는데 한참이 걸린다. 시간 제한이 2초이기 때문에 여기까지만 본다면 불가능한 문제일 수 도 있다. 하지만, 마지막 문제 조건인 최소값 $m$의 크기가 1,000,000,000이기 때문에 문자열의 길이가 $m$의 최대값만 넘기지 않으면 되기 떄문에, 이를 이용해서 문제를 풀 수 있게 된다.</p>

<h3 id="구분">구분</h3>

<p>문자열에 <code class="language-plaintext highlighter-rouge">$</code>가 2개이상 포함될 경우에는 실행마다 지수적으로 문자가 증가하게 된다. <code class="language-plaintext highlighter-rouge">$</code>를 2개 이상 포함하는 경우에서, 최소한의 문자열 입력을 생각한다면, 한 문자 입력과 <code class="language-plaintext highlighter-rouge">$</code><code class="language-plaintext highlighter-rouge">$</code>가 입력된 경우를 생각해 볼 수 있다.</p>

<p>이 때, $2^{30} \approx 10^{9}$이기 때문에, <code class="language-plaintext highlighter-rouge">$</code>가 2번 이상 넘어가는 경우에는 30번 이상 실행되는 경우에 대해서는 생각해줄 필요가 없다.</p>

<ol>
  <li><code class="language-plaintext highlighter-rouge">$</code>가 하나 포함된 경우</li>
  <li><code class="language-plaintext highlighter-rouge">$</code>가 2개 이상 포함된 경우</li>
</ol>

<p>로 구분하여서 풀었다</p>

<h3 id="테스트-케이스">테스트 케이스</h3>

<p>문제에서 제공되는 테스트 케이스가 그리 충분하지는 않다. 다만, 엣지 케이스가 그렇게 많이 존재하지는 않는 것 같고 만약 안될 경우에는</p>

<ol>
  <li>출력 범위가 실행 후 총 문자열 길이를 넘어서는지(아예 -로만 출력되는 경우 등)</li>
  <li>2번째 문자열 입력에 이 <code class="language-plaintext highlighter-rouge">$</code>로 끝나는지</li>
  <li>2번째 문자열 입력이 <code class="language-plaintext highlighter-rouge">$</code>로만 구성되어있는지</li>
</ol>

<p>정도만 생각하면 될 것 같다.</p>

<h2 id="코드">코드</h2>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
</pre></td><td class="code"><pre><span class="k">def</span> <span class="nf">solve</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">S</span><span class="p">,</span> <span class="n">r</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">M</span><span class="p">):</span>
    <span class="n">a</span> <span class="o">=</span> <span class="n">a</span>
    <span class="n">S</span> <span class="o">=</span> <span class="n">S</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">'$'</span><span class="p">)[</span><span class="mi">1</span><span class="p">:]</span>
    <span class="n">r</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">M</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">r</span><span class="p">),</span> <span class="nb">int</span><span class="p">(</span><span class="n">m</span><span class="p">),</span> <span class="nb">int</span><span class="p">(</span><span class="n">M</span><span class="p">)</span>

    <span class="n">len_a</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
    <span class="n">len_S</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">len</span><span class="p">,</span> <span class="n">S</span><span class="p">))</span>
    <span class="n">total_len_S</span> <span class="o">=</span> <span class="nb">sum</span><span class="p">(</span><span class="n">len_S</span><span class="p">)</span>

    <span class="n">initial</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">a</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">S</span><span class="p">)</span>

    <span class="n">ans</span> <span class="o">=</span> <span class="s">''</span>

    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">S</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
        <span class="n">total_len</span> <span class="o">=</span> <span class="n">len_a</span> <span class="o">+</span> <span class="n">total_len_S</span> <span class="o">*</span> <span class="n">r</span>
        <span class="n">ans</span> <span class="o">=</span> <span class="s">''</span>
        
        <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">m</span><span class="p">,</span> <span class="n">M</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">k</span> <span class="o">&lt;=</span> <span class="n">len_a</span><span class="p">:</span>
                <span class="n">ans</span> <span class="o">+=</span> <span class="n">a</span><span class="p">[</span><span class="n">k</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span>
            <span class="k">elif</span> <span class="n">k</span> <span class="o">&lt;=</span> <span class="n">total_len</span><span class="p">:</span>
                <span class="n">ans</span> <span class="o">+=</span> <span class="n">S</span><span class="p">[</span><span class="mi">0</span><span class="p">][(</span><span class="n">k</span> <span class="o">-</span> <span class="n">len_a</span><span class="p">)</span> <span class="o">%</span> <span class="n">total_len_S</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">ans</span> <span class="o">+=</span> <span class="s">'-'</span>

    <span class="k">else</span><span class="p">:</span>
        <span class="n">cycle</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">cycle</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">total_len_S</span> <span class="o">+</span> <span class="n">len_a</span> <span class="o">*</span> <span class="nb">len</span><span class="p">(</span><span class="n">S</span><span class="p">))</span>

        <span class="n">limit</span> <span class="o">=</span> <span class="n">M</span>
        <span class="k">if</span> <span class="n">r</span> <span class="o">&lt;=</span> <span class="mi">30</span><span class="p">:</span>
            <span class="n">total_len</span> <span class="o">=</span> <span class="n">total_len_S</span> <span class="o">*</span> <span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">len_S</span><span class="p">)</span> <span class="o">**</span> <span class="n">r</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">len_S</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">len_S</span><span class="p">)</span> <span class="o">**</span> <span class="n">r</span><span class="p">)</span> <span class="o">*</span> <span class="n">len_a</span>
            <span class="n">limit</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">M</span><span class="p">,</span> <span class="n">total_len</span><span class="p">)</span>
        <span class="k">while</span> <span class="n">cycle</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">limit</span><span class="p">:</span>
            <span class="n">cycle</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">total_len_S</span> <span class="o">+</span> <span class="n">cycle</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">*</span> <span class="nb">len</span><span class="p">(</span><span class="n">S</span><span class="p">))</span>
        
        <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">m</span><span class="p">,</span> <span class="n">M</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
            <span class="n">temp</span> <span class="o">=</span> <span class="n">k</span>

            <span class="k">if</span> <span class="n">k</span> <span class="o">&gt;</span> <span class="n">cycle</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]:</span>
                <span class="n">ans</span> <span class="o">+=</span> <span class="s">'-'</span>
                <span class="k">continue</span>

            <span class="n">init_final</span> <span class="o">=</span> <span class="bp">True</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">cycle</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
                <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span>
                <span class="k">while</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">S</span><span class="p">):</span>
                    <span class="k">if</span> <span class="n">cycle</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="n">temp</span><span class="p">:</span> <span class="c1"># 첫번째 실행에 포함된 문자열
</span>                        <span class="n">init_final</span> <span class="o">=</span> <span class="bp">True</span>
                        <span class="k">break</span>
                    <span class="n">temp</span> <span class="o">-=</span> <span class="n">cycle</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>

                    <span class="k">if</span> <span class="n">len_S</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="n">temp</span><span class="p">:</span>
                        <span class="n">init_final</span> <span class="o">=</span> <span class="bp">False</span>
                        <span class="k">break</span>
                    <span class="n">temp</span> <span class="o">-=</span> <span class="n">len_S</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>
                    <span class="n">j</span> <span class="o">+=</span> <span class="mi">1</span>
                
                <span class="k">if</span> <span class="ow">not</span> <span class="n">init_final</span><span class="p">:</span>
                    <span class="k">break</span>

            <span class="k">if</span> <span class="n">init_final</span><span class="p">:</span>
                <span class="n">ans</span> <span class="o">+=</span> <span class="n">initial</span><span class="p">[</span><span class="n">temp</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">ans</span> <span class="o">+=</span> <span class="n">S</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">temp</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
    <span class="k">return</span> <span class="n">ans</span>


<span class="n">a</span> <span class="o">=</span> <span class="nb">input</span><span class="p">()</span>
<span class="n">S</span> <span class="o">=</span> <span class="nb">input</span><span class="p">()</span>
<span class="n">r</span> <span class="o">=</span> <span class="nb">input</span><span class="p">()</span>
<span class="n">m</span><span class="p">,</span> <span class="n">M</span> <span class="o">=</span> <span class="nb">input</span><span class="p">().</span><span class="n">split</span><span class="p">()</span>

<span class="k">print</span><span class="p">(</span><span class="n">solve</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">S</span><span class="p">,</span> <span class="n">r</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">M</span><span class="p">))</span>
</pre></td></tr></tbody></table></code></pre></figure>]]></content><author><name>ksyu0508</name></author><category term="problem solving" /><category term="boj" /><category term="python" /><category term="시뮬레이션" /><summary type="html"><![CDATA[문제]]></summary></entry><entry><title type="html">백준 1014번 문제 풀이</title><link href="https://ksyu0508.github.io/problem%20solving/boj-1014/" rel="alternate" type="text/html" title="백준 1014번 문제 풀이" /><published>2023-07-11T00:00:00+00:00</published><updated>2023-07-11T00:00:00+00:00</updated><id>https://ksyu0508.github.io/problem%20solving/boj-1014</id><content type="html" xml:base="https://ksyu0508.github.io/problem%20solving/boj-1014/"><![CDATA[<h2 id="문제">문제</h2>

<div class="jekyll-linkpreview-wrapper">
  <div class="jekyll-linkpreview-wrapper-inner">
    <div class="jekyll-linkpreview-content">
      <div class="jekyll-linkpreview-image">
        <a href="https://www.acmicpc.net/problem/1014" target="_blank">
          <img src="" />
        </a>
      </div>
    </div>
    <div class="jekyll-linkpreview-footer">
      <div class="jekyll-linkpreview-body">
        <h1 class="jekyll-linkpreview-title">
          <a href="https://www.acmicpc.net/problem/1014" target="_blank">1014번: 컨닝</a>
        </h1>
        <div class="jekyll-linkpreview-description">최백준은 컨닝을 방지하기 위해서 다음과 같은 전략을 세웠다. 모든 학생은 자신의 왼쪽, 오른쪽, 왼쪽 대각선 위, 오른쪽 대각선 위, 이렇게 총 네 자리에 앉아있는 친구의 답지를 항상 베낀다고 가정한다. 따라서, 자리 배치는 모든 학생이 컨닝을 할 수 없도록 배치되어야 한다.</div>
      </div>
      <a href="www.acmicpc.net" target="_blank">www.acmicpc.net</a>
    </div>
  </div>
</div>

<h2 id="풀이-해설">풀이 해설</h2>

<h3 id="비트-마스킹">비트 마스킹</h3>

<p>한 열에 학생들이 8명 앉아 있고, 오른쪽을 기준으로 1, 3, 6번째 자리의 학생들이 앉은 경우를 이진수로 표현하게 되면</p>

<p>$$ 00100101_{(2)} $$</p>

<p>현재 열의 상태를 위와 같이 표현할 수 있고, 이는 십진수로는 37으로 나타낼 수 있고, 총 8자리 임으로 우리는 $2^{8}$의 숫자, 0 ~ 255의 숫자로 현재 열의 상태를 표현할 수 있다. 오로지 현재 열의 앉은 상태만을 고려하고 앞자리 혹은 뒷자리에 앉은 인원과 앉을 수 없는 자리 여부 등은 탐색을 진행하면서 고려하면 된다. 열을 기준으로 앞 열부터 탐색을 진행하던, 뒷 열부터 탐색을 진행하던 크게 상관은 없고 이번 풀이에서는 앞 열부터 탐색을 진행하려 한다.</p>

<h3 id="점화식">점화식</h3>
<p>기본적으로 다이나믹 프로그래밍을 이용하여 풀면 되며, 현재 열 $i$의 앉은 상태 $j$에서의 $i$열부터 맨 앞열 까지의 앉은 인원의 최대 수를 $A_{i, j}$라 한다면 두가지 조건 ①, ②에 대해서</p>

<ol>
  <li>
    <p>현재 열 $j$에 부서진 자리가 앉는 학생이 없고, 붙어 앉는 학생이 없는 경우</p>
  </li>
  <li>
    <p>현재열의 자리 $j$가 앞 열의 자리 $k$ 상태에서 컨닝이 불가능 한 경우</p>
  </li>
</ol>

<p>$$
A_{i, j}= 
\begin{cases}
0, &amp; \text{if } j \text{가 ①, ②에 위배}
\\ 
(j \text{의 2진수 표현에서 1의 개수}) + \max\left(A_{i-1, k} \right), &amp; \text{if } j\text{가 ①, ② 모두 만족}
\end{cases}
$$</p>

<p>1열부터 위 점화식을 계산해나가면 마지막 열에서 가능한 모든 자리들 중에서 최대값을 구하면 결국 총 앉을 수 있는 인원의 최대값을 구할 수 있게 되는 것이다.</p>

<h3 id="비트-연산">비트 연산</h3>

<p>한글로 풀어서 설명한 연산들도 비트연산으로 간단하게 해결할 수 있다.</p>

<ol>
  <li>
    <p>현재 열 $j$에 부서진 자리가 앉는 학생이 없고, 붙어 앉는 학생이 없는 경우</p>

    <p>$i$열의 부서진 자리의 값을 <code class="language-plaintext highlighter-rouge">case[i]</code>라고 표현한다면</p>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="n">j</span> <span class="o">&amp;</span> <span class="n">case</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span>
</code></pre></div>    </div>
    <p>을 통해서 부서진 자리와 현재 상태 $j$가 겹치지 않을 경우 0이 나올 것으로 이를 통해 판단할 수 있다. 마찬가지로 옆자리에 다른 학생이 앉지 않는 경우는 비트시프트한 자기 자신과 AND 연산을 했을 때에 0 이외의 값이 나올 경우 옆자리에 붙어 앉아 있는 학생이 있다는 소리가 된다.</p>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="p">(</span><span class="n">j</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">j</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="p">))</span> <span class="o">==</span> <span class="mi">0</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>현재열의 자리 $j$가 앞 열의 자리 $k$ 상태에서 컨닝이 불가능 한 경우</p>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="n">mask</span> <span class="o">=</span> <span class="p">(</span><span class="n">k</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="n">k</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">)</span>
</code></pre></div>    </div>
    <p>$k$의 대각선 방향, 즉 좌우만 없으면 없으면 되기 때문에 마스크를 오른쪽, 왼쪽 비트 시프트 후에 비트 OR 연산을 해주면 간단히 마스크를 만들 수 있고, 마찬가지로 mask와 j를 비트 AND 연산을 하여 0이 나오면, 조건을 만족, 0이외의 값이 나오면 대각선 자리에 앉는 학생이 있으므로 불만족하게 된다.</p>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="n">j</span> <span class="o">&amp;</span> <span class="n">mask</span> <span class="o">==</span> <span class="mi">0</span>
</code></pre></div>    </div>
  </li>
</ol>

<h2 id="코드">코드</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">sys</span>
<span class="nb">input</span> <span class="o">=</span> <span class="n">sys</span><span class="p">.</span><span class="n">stdin</span><span class="p">.</span><span class="n">readline</span>

<span class="n">c</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">())</span>
<span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">c</span><span class="p">):</span>
    <span class="n">n</span><span class="p">,</span> <span class="n">m</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">input</span><span class="p">().</span><span class="n">replace</span><span class="p">(</span><span class="s">'</span><span class="se">\n</span><span class="s">'</span><span class="p">,</span> <span class="s">''</span><span class="p">).</span><span class="n">split</span><span class="p">()))</span>

    <span class="n">case</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
        <span class="n">temp</span> <span class="o">=</span> <span class="s">'0b'</span> <span class="o">+</span> <span class="nb">input</span><span class="p">().</span><span class="n">replace</span><span class="p">(</span><span class="s">'</span><span class="se">\n</span><span class="s">'</span><span class="p">,</span> <span class="s">''</span><span class="p">).</span><span class="n">replace</span><span class="p">(</span><span class="s">'x'</span><span class="p">,</span> <span class="s">'1'</span><span class="p">).</span><span class="n">replace</span><span class="p">(</span><span class="s">'.'</span><span class="p">,</span> <span class="s">'0'</span><span class="p">)</span>
        <span class="n">case</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">temp</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span>

    <span class="n">memo</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="p">(</span><span class="mi">2</span> <span class="o">**</span> <span class="n">m</span><span class="p">)</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)]</span>

    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span> <span class="o">**</span> <span class="n">m</span><span class="p">):</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">j</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">j</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="p">))</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">j</span> <span class="o">&amp;</span> <span class="n">case</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="c1"># 좌우에 학생 없는 경우 + 부서진 자리에 앉지 않는 경우
</span>                <span class="n">value</span> <span class="o">=</span> <span class="mi">0</span>
                <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span> <span class="o">**</span> <span class="n">m</span><span class="p">):</span>
                    <span class="n">mask</span> <span class="o">=</span> <span class="p">(</span><span class="n">k</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="n">k</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">)</span>
                    <span class="k">if</span> <span class="p">(</span><span class="n">j</span> <span class="o">&amp;</span> <span class="n">mask</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                        <span class="c1"># 앞자리 학생을 컨닝하지 못하는 경우
</span>                        <span class="k">if</span> <span class="n">value</span> <span class="o">&lt;</span> <span class="n">memo</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="n">k</span><span class="p">]:</span>
                            <span class="n">value</span> <span class="o">=</span> <span class="n">memo</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="n">k</span><span class="p">]</span>
                <span class="n">memo</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">value</span> <span class="o">+</span> <span class="nb">bin</span><span class="p">(</span><span class="n">j</span><span class="p">).</span><span class="n">count</span><span class="p">(</span><span class="s">'1'</span><span class="p">)</span>
    
    <span class="k">print</span><span class="p">(</span><span class="nb">max</span><span class="p">(</span><span class="n">memo</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]))</span>
</code></pre></div></div>

<h2 id="숏코딩">숏코딩</h2>

<p>숏코딩(혹은 code golf)는 주어진 문제를 최대한 짧은 코드로 해결하는 프로그래밍 스타일이다. 일반적으로 우리는 프로그래밍일 할 때, 가독성 및 유지보수성을 위해서 명확하고 간결한 코드를 작성하려고 한다. 그러나 숏코딩은 이와는 정반대로 오히려 가독성을 포기하고 길이를 최소화하는 것이 목표이다. 따라서 단순히 취미 이상으로 숏코딩에 집중하는 것은 크게 의미가 있어보이지 않고, 또 짧게 코드를 줄이는 과정에서 성능 저하가 발생할 수도 있고, 실무에서 협업시에는 말그대로 민폐가 될 수 있기 때문에 이런 것도 있다 정도로만 생각하면 좋을 것 같다. 다만 숏코딩의 방법을 참고하면 불필요하게 길게 작성되는 반복문 조건문 등을 줄이고, 또 코드의 작동 구조를 파악하는데에도 어느정도 도움이 되는 것 같다.</p>

<p>숏코딩에 주로 활용되는 언어로는 <code class="language-plaintext highlighter-rouge">Perl</code>, <code class="language-plaintext highlighter-rouge">Python</code>, <code class="language-plaintext highlighter-rouge">Ruby</code>, <code class="language-plaintext highlighter-rouge">Golfscript</code>, <code class="language-plaintext highlighter-rouge">APL</code>, <code class="language-plaintext highlighter-rouge">J</code>, <code class="language-plaintext highlighter-rouge">PerL Golf</code> 등이 있다고 한다. 다만, 오로지 짧은 코드를 만들겠다고 새로운 언어를 공부할 정도의 열정은 없었기 때문에 python 코드를 한번 극한으로 줄여보려고 한다.</p>

<h2 id="숏코딩-풀이">숏코딩 풀이</h2>

<p>비트 연산을 사용하면서 생각보다 코드 내용이 간단해지자, 갑자기 극한으로 줄일 수 있을 것 같다는 생각이 들었다. 위의 코드와 거의 동일한 알고리즘을 가지고 있지만, 극한으로 길이를 줄인다면 아래와 같은 형태의 코드를 얻을 수 있다. 글을 작성하는 시점에서의 본인도 해석하려면 힘든 수준의 암호로 변해버린 모습…</p>

<p>파이썬 코드를 줄이는 방법으로는 다음이 사용되었다.</p>

<ol>
  <li>list 안에서 for문 사용</li>
  <li>자주 쓰는 함수명 짧게 재정의</li>
  <li>indentation을 space 4칸에서 1칸으로</li>
  <li>조건문을 boolean 값 직접 곱하는 것으로 치환</li>
  <li>for문, if문 이후 들여쓰기 x(1줄만 가능)</li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">,</span><span class="n">d</span><span class="o">=</span><span class="nb">int</span><span class="p">,</span><span class="nb">input</span><span class="p">,</span><span class="nb">range</span><span class="p">,</span><span class="nb">max</span>
<span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="n">c</span><span class="p">(</span><span class="n">a</span><span class="p">(</span><span class="n">b</span><span class="p">())):</span>
 <span class="n">n</span><span class="p">,</span><span class="n">m</span><span class="o">=</span><span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">().</span><span class="n">split</span><span class="p">()))</span>
 <span class="n">e</span><span class="o">=</span><span class="mi">2</span><span class="o">**</span><span class="n">m</span>
 <span class="n">s</span><span class="p">,</span><span class="n">M</span><span class="o">=</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">+</span><span class="p">[</span><span class="n">a</span><span class="p">(</span><span class="n">b</span><span class="p">().</span><span class="n">translate</span><span class="p">({</span><span class="mi">120</span><span class="p">:</span><span class="mi">49</span><span class="p">,</span><span class="mi">46</span><span class="p">:</span><span class="mi">48</span><span class="p">}),</span><span class="mi">2</span><span class="p">)</span><span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="n">c</span><span class="p">(</span><span class="n">n</span><span class="p">)],[[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="p">(</span><span class="n">e</span><span class="p">)]</span>
 <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">c</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span><span class="n">M</span><span class="p">.</span><span class="n">append</span><span class="p">([</span><span class="n">d</span><span class="p">([</span><span class="n">M</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="n">k</span><span class="p">]</span><span class="o">*</span><span class="p">(</span><span class="n">j</span><span class="o">&amp;</span><span class="p">(</span><span class="n">k</span><span class="o">&lt;&lt;</span><span class="mi">1</span><span class="o">|</span><span class="n">k</span><span class="o">&gt;&gt;</span><span class="mi">1</span><span class="p">)</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span><span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">c</span><span class="p">(</span><span class="n">e</span><span class="p">)])</span><span class="o">+</span><span class="nb">bin</span><span class="p">(</span><span class="n">j</span><span class="p">).</span><span class="n">count</span><span class="p">(</span><span class="s">'1'</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">j</span><span class="o">&amp;</span><span class="n">j</span><span class="o">&lt;&lt;</span><span class="mi">1</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">j</span><span class="o">&amp;</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span><span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="n">c</span><span class="p">(</span><span class="n">e</span><span class="p">)])</span>
 <span class="k">print</span><span class="p">(</span><span class="n">d</span><span class="p">(</span><span class="n">M</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]))</span>
</code></pre></div></div>

<p>처음 제출이 1034B인 것에 반해서, 최종적으로는 무려 304B까지 줄일 수 있었다. 다만, 그 과정속에서 사용한 메모리는 크게 변화 없지만, 시간이 248ms에서 728ms로 거의 3배 가량 느려진 모습을 볼 수 있다. 따라서 숏코딩은 앞서 말한 것 처럼 한번 언어 구조를 파악하는 거 이상으로는 실질적인 도움은 되지 않을 것으로 보인다.</p>]]></content><author><name>ksyu0508</name></author><category term="problem solving" /><category term="boj" /><category term="python" /><category term="비트마스킹" /><category term="다이나믹 프로그래밍" /><category term="숏코딩" /><category term="code golf" /><summary type="html"><![CDATA[문제]]></summary></entry><entry><title type="html">github blog 링크 미리보기 기능 추가</title><link href="https://ksyu0508.github.io/github%20blog/link-preview/" rel="alternate" type="text/html" title="github blog 링크 미리보기 기능 추가" /><published>2023-07-01T00:00:00+00:00</published><updated>2023-07-01T00:00:00+00:00</updated><id>https://ksyu0508.github.io/github%20blog/link-preview</id><content type="html" xml:base="https://ksyu0508.github.io/github%20blog/link-preview/"><![CDATA[<h2 id="서론">서론</h2>

<p>github blog에서도 네이버 블로그나 티스토리 블로그에서 처럼 링크 임베딩시 링크 미리보기가 적용되었으면 해서 관련 플러그인을 찾아보았다. <code class="language-plaintext highlighter-rouge">jekyll-linkpreview</code>라는 플러그인이 있어 적용해보려 한다. github blog에서 기본 플러그인 이외의 플러그인을 사용하고 싶다면 다음 포스팅을 확인하면 도움이 될 것이다.</p>

<h2 id="jekyll-preview-설치">jekyll-preview 설치</h2>

<div class="jekyll-linkpreview-wrapper">
  <div class="jekyll-linkpreview-wrapper-inner">
    <div class="jekyll-linkpreview-content">
      <div class="jekyll-linkpreview-image">
        <a href="https://github.com/ysk24ok/jekyll-linkpreview" target="_blank">
          <img src="https://opengraph.githubassets.com/fabeaa88e88e65cf81e448838fc6deea93411b8bf1f47fd2b562c2f734430c6f/ysk24ok/jekyll-linkpreview" />
        </a>
      </div>
    </div>
    <div class="jekyll-linkpreview-footer">
      <div class="jekyll-linkpreview-body">
        <h1 class="jekyll-linkpreview-title">
          <a href="https://github.com/ysk24ok/jekyll-linkpreview" target="_blank">GitHub - ysk24ok/jekyll-linkpreview: Jekyll plugin to generate link preview</a>
        </h1>
        <div class="jekyll-linkpreview-description">Jekyll plugin to generate link preview. Contribute to ysk24ok/jekyll-linkpreview development by creating an account on GitHub.</div>
      </div>
      <a href="github.com" target="_blank">github.com</a>
    </div>
  </div>
</div>

<h3 id="1-gemfile에-아래-내용-추가">1. <code class="language-plaintext highlighter-rouge">Gemfile</code>에 아래 내용 추가</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gem 'jekyll-linkpreview', group: :jekyll_plugins

group :development do
    gem 'appraisal', git: 'https://github.com/thoughtbot/appraisal'
  end
</code></pre></div></div>
<h3 id="2-초기-설정">2. 초기 설정</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">_cache</code> 디렉토리를 블로그 폴더 최상단에 생성</li>
  <li><a href="https://github.com/ysk24ok/jekyll-linkpreview/blob/master/assets/css/linkpreview.css">linkpreview.css</a>파일을 assets/css에 추가</li>
  <li><code class="language-plaintext highlighter-rouge">linkpreview.css</code>가 적용될 수 있도록 <code class="language-plaintext highlighter-rouge">_include/head.html</code>에 스타일 시트 추가</li>
</ul>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"stylesheet"</span> <span class="na">type=</span><span class="s">"text/css"</span> <span class="na">href=</span><span class="s">"/assets/css/linkpreview.css"</span> <span class="na">media=</span><span class="s">"screen"</span><span class="nt">&gt;</span>
</code></pre></div></div>

<h3 id="3-설치">3. 설치</h3>

<pre><code class="language-Ruby_prompt">$ bundle install
</code></pre>

<h2 id="linkpreview-사용법">linkpreview 사용법</h2>

<p>마크다운 파일에 자신이 원하는 링크를 linkpreview 태그로 감싸기</p>

<pre><code class="language-Markdown">{% linkpreview "https://ogp.me/" %}
</code></pre>

<p>실행결과:</p>
<div class="jekyll-linkpreview-wrapper">
  <div class="jekyll-linkpreview-wrapper-inner">
    <div class="jekyll-linkpreview-content">
      <div class="jekyll-linkpreview-image">
        <a href="https://ogp.me/" target="_blank">
          <img src="https://ogp.me/logo.png" />
        </a>
      </div>
    </div>
    <div class="jekyll-linkpreview-footer">
      <div class="jekyll-linkpreview-body">
        <h1 class="jekyll-linkpreview-title">
          <a href="https://ogp.me/" target="_blank">Open Graph protocol</a>
        </h1>
        <div class="jekyll-linkpreview-description">The Open Graph protocol enables any web page to become a rich object in a social graph.</div>
      </div>
      <a href="ogp.me" target="_blank">ogp.me</a>
    </div>
  </div>
</div>

<h2 id="사용자-정의-설정">사용자 정의 설정</h2>

<p><code class="language-plaintext highlighter-rouge">_includes</code>에 Open graph가 있는 페이지에 대해서는 <code class="language-plaintext highlighter-rouge">linkpreview.html</code>, Open graph가 없는 페이지에 대해서는 <code class="language-plaintext highlighter-rouge">linkpreview_nog.html</code>파일을 이용해 place holder를 사용한다면 원하는 형태로 링크 미리보기의 내용을 변경할 수 있다. 필자는 기본에서 딱히 변경한 것은 없고, h2태그를 사이드바가 제목으로 인식해버리는 문제가 있어서 태그만 변경해주었다. 태그의 목록은 마찬가지로 플러그인 <a href="https://github.com/ysk24ok/jekyll-linkpreview/tree/master#custom-templates">깃헙</a>에서 확인이 가능하다. 다양한 태그가 있지만, 딱히 필요성을 느끼지는 못했다. 지금이 제일 깔끔…</p>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="code"><pre><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"jekyll-linkpreview-wrapper"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"jekyll-linkpreview-wrapper-inner"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"jekyll-linkpreview-content"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"jekyll-linkpreview-image"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">""</span> <span class="na">target=</span><span class="s">"_blank"</span><span class="nt">&gt;</span>
          <span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">""</span> <span class="nt">/&gt;</span>
        <span class="nt">&lt;/a&gt;</span>
      <span class="nt">&lt;/div&gt;</span>

      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"jekyll-linkpreview-body"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;h1</span> <span class="na">class=</span><span class="s">"jekyll-linkpreview-title"</span><span class="nt">&gt;</span>
          <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">""</span> <span class="na">target=</span><span class="s">"_blank"</span><span class="nt">&gt;&lt;/a&gt;</span>
        <span class="nt">&lt;/h1&gt;</span>
        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"jekyll-linkpreview-description"</span><span class="nt">&gt;&lt;/div&gt;</span>
      <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"jekyll-linkpreview-footer"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">""</span> <span class="na">target=</span><span class="s">"_blank"</span><span class="nt">&gt;&lt;/a&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p><code class="language-plaintext highlighter-rouge">linkpreview.css</code>의 내용을 변경해서 미리보기의 모양을 변경할 수 있다. 아래의 코드는 기본코드에서 박스 그림자, 사진 위치 위로 크게 변경 등의 커스터마이징이 적용되었다.</p>

<figure class="highlight"><pre><code class="language-css" data-lang="css"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
</pre></td><td class="code"><pre><span class="nc">.jekyll-linkpreview-wrapper</span> <span class="p">{</span>
  <span class="nl">max-width</span><span class="p">:</span> <span class="m">600px</span><span class="p">;</span>
  <span class="nl">margin-bottom</span><span class="p">:</span> <span class="m">20px</span><span class="p">;</span>
  <span class="nl">background-color</span><span class="p">:</span> <span class="m">#f8f8f8</span><span class="p">;</span>
  <span class="nl">box-shadow</span><span class="p">:</span> <span class="m">0</span> <span class="m">2px</span> <span class="m">4px</span> <span class="n">rgba</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0.1</span><span class="p">);</span>
  <span class="nl">border-radius</span><span class="p">:</span> <span class="m">4px</span><span class="p">;</span>
  <span class="nl">overflow</span><span class="p">:</span> <span class="nb">visible</span><span class="p">;</span>
  <span class="nl">position</span><span class="p">:</span> <span class="nb">relative</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.jekyll-linkpreview-wrapper-inner</span> <span class="p">{</span>
  <span class="nl">border</span><span class="p">:</span> <span class="m">1px</span> <span class="nb">solid</span> <span class="n">rgba</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0.1</span><span class="p">);</span>
  <span class="nl">padding</span><span class="p">:</span> <span class="m">12px</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.jekyll-linkpreview-content</span> <span class="p">{</span>
  <span class="nl">position</span><span class="p">:</span> <span class="nb">relative</span><span class="p">;</span>
  <span class="nl">margin-bottom</span><span class="p">:</span> <span class="m">10px</span><span class="p">;</span>
  <span class="nl">background-color</span><span class="p">:</span> <span class="m">#f8f8f8</span><span class="p">;</span>
  <span class="nl">border-radius</span><span class="p">:</span> <span class="m">4px</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.jekyll-linkpreview-image</span> <span class="p">{</span>
  <span class="nl">display</span><span class="p">:</span> <span class="nb">block</span><span class="p">;</span>
  <span class="nl">margin</span><span class="p">:</span> <span class="m">0</span> <span class="nb">auto</span><span class="p">;</span>
  <span class="nl">max-width</span><span class="p">:</span> <span class="m">100%</span><span class="p">;</span>
  <span class="nl">height</span><span class="p">:</span> <span class="nb">auto</span><span class="p">;</span>
  <span class="nl">border-radius</span><span class="p">:</span> <span class="m">4px</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.jekyll-linkpreview-body</span> <span class="p">{</span>
  <span class="nl">margin-top</span><span class="p">:</span> <span class="m">20px</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.jekyll-linkpreview-title</span> <span class="p">{</span>
  <span class="nl">font-size</span><span class="p">:</span> <span class="m">17px</span><span class="p">;</span>
  <span class="nl">margin</span><span class="p">:</span> <span class="m">0</span> <span class="m">0</span> <span class="m">2px</span><span class="p">;</span>
  <span class="nl">line-height</span><span class="p">:</span> <span class="m">1.3</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.jekyll-linkpreview-description</span> <span class="p">{</span>
  <span class="nl">line-height</span><span class="p">:</span> <span class="m">1.5</span><span class="p">;</span>
  <span class="nl">font-size</span><span class="p">:</span> <span class="m">13px</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.jekyll-linkpreview-footer</span> <span class="p">{</span>
  <span class="nl">font-size</span><span class="p">:</span> <span class="m">11px</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<h2 id="open-graph란">Open Graph란?</h2>

<p><code class="language-plaintext highlighter-rouge">Open Graph</code>는 웹 페이지의 메타데이터를 정의하는 프로토콜이다. 이 메타데이터는 웹 페이지가 SNS와 같은 소셜 그래프에서 공유될 때 제목, 설명, 이미지 등과 같은 정보를 제공한다. 일반적으로 우리가 SNS 사용 시 접하는 사진을 포함한 미리보기가 바로 이것이며, 웹 페이지를 소셜 미디어에서 보다 풍부하게 표현하고 링크의 미리보기를 제공하는 데 사용된다.</p>

<p>Open Graph 메타데이터는 <code class="language-plaintext highlighter-rouge">&lt;meta&gt;</code> 태그를 사용하여 웹 페이지의 <code class="language-plaintext highlighter-rouge">&lt;head&gt;</code> 섹션에 추가하면 된다 . <code class="language-plaintext highlighter-rouge">og:title</code>, <code class="language-plaintext highlighter-rouge">og:type</code>, <code class="language-plaintext highlighter-rouge">og:description</code>,<code class="language-plaintext highlighter-rouge">og:image</code>, <code class="language-plaintext highlighter-rouge">og:url</code> 등의 다양한 tag를 통해서 메타데이틀 만들어낼 수 있다.</p>

<h3 id="1-open-gragh-있는-경우">1. Open Gragh 있는 경우:</h3>

<div class="jekyll-linkpreview-wrapper">
  <div class="jekyll-linkpreview-wrapper-inner">
    <div class="jekyll-linkpreview-content">
      <div class="jekyll-linkpreview-image">
        <a href="https://github.com/ksyu0508/ybigta_chatbot" target="_blank">
          <img src="https://opengraph.githubassets.com/afafdfb9d79485762ecf73c2fcf8f6fa918521da963ef3139840539dd66d8596/ksyu0508/ybigta_chatbot" />
        </a>
      </div>
    </div>
    <div class="jekyll-linkpreview-footer">
      <div class="jekyll-linkpreview-body">
        <h1 class="jekyll-linkpreview-title">
          <a href="https://github.com/ksyu0508/ybigta_chatbot" target="_blank">GitHub - ksyu0508/ybigta_chatbot: 심심한 와빅이</a>
        </h1>
        <div class="jekyll-linkpreview-description">심심한 와빅이. Contribute to ksyu0508/ybigta_chatbot development by creating an account on GitHub.</div>
      </div>
      <a href="github.com" target="_blank">github.com</a>
    </div>
  </div>
</div>

<h3 id="2-open-graph-없는-경우">2. Open Graph 없는 경우:</h3>

<div class="jekyll-linkpreview-wrapper">
  <div class="jekyll-linkpreview-wrapper-inner">
    <div class="jekyll-linkpreview-content">
      <div class="jekyll-linkpreview-image">
        <a href="https://ksyu0508.github.io/debug/TA-lib/" target="_blank">
          <img src="" />
        </a>
      </div>
    </div>
    <div class="jekyll-linkpreview-footer">
      <div class="jekyll-linkpreview-body">
        <h1 class="jekyll-linkpreview-title">
          <a href="https://ksyu0508.github.io/debug/TA-lib/" target="_blank">windows에서 TA-lib 설치 방법</a>
        </h1>
        <div class="jekyll-linkpreview-description">TA-lib 개요</div>
      </div>
      <a href="ksyu0508.github.io" target="_blank">ksyu0508.github.io</a>
    </div>
  </div>
</div>

<h2 id="결론">결론</h2>

<p><code class="language-plaintext highlighter-rouge">Open Graph</code>가 없는 웹페이지보다 예쁘게 미리보기로 노출될 수 있고, 또한 검색 엔진 최적화(SEO)에도 영향을 미칠 수 있다. 물론 <code class="language-plaintext highlighter-rouge">jekyll</code>은 기본적으로 <code class="language-plaintext highlighter-rouge">seo-tag</code>를 제공하고 있기 때문에 크게 영향을 받지는 않을 것이다. 다만, <code class="language-plaintext highlighter-rouge">github</code>과 같은 사이트들은 <code class="language-plaintext highlighter-rouge">open graph</code>에 노출되는 이미지를 자동으로 만들어주기에, <code class="language-plaintext highlighter-rouge">jekyll</code> 블로그에서 자동으로 대표 이미지 태그를 추가하는 내용은 따로 포스팅하도록 하겠다.</p>]]></content><author><name>ksyu0508</name></author><category term="github blog" /><category term="jekyll" /><category term="open graph" /><summary type="html"><![CDATA[서론]]></summary></entry></feed>